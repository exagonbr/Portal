import { NextRequest } from 'next/server';

/**
 * Prepara os headers de autentica√ß√£o para requisi√ß√µes proxy ao backend
 */
export function prepareAuthHeaders(request: NextRequest): Record<string, string> {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  };

  console.log('üîç [AUTH-HEADERS] Preparando headers de autentica√ß√£o...');

  // Copiar header de autoriza√ß√£o se existir (case insensitive)
  const authHeader = request.headers.get('Authorization') || request.headers.get('authorization');
  if (authHeader) {
    headers['Authorization'] = authHeader;
    console.log('üîê [AUTH-HEADERS] Authorization header encontrado e copiado:', {
      length: authHeader.length,
      preview: authHeader.substring(0, 20) + '...',
      hasBearer: authHeader.startsWith('Bearer ')
    });
  }

  // Adicionar header X-Auth-Token se existir
  const xAuthToken = request.headers.get('X-Auth-Token') || request.headers.get('x-auth-token');
  if (xAuthToken) {
    headers['X-Auth-Token'] = xAuthToken;
    console.log('üîê [AUTH-HEADERS] X-Auth-Token header encontrado e copiado');
  }

  // Tentar extrair token dos cookies se n√£o houver Authorization header
  if (!authHeader && !xAuthToken) {
    console.log('üîç [AUTH-HEADERS] Nenhum header de auth encontrado, verificando cookies...');
    
    const cookieHeader = request.headers.get('Cookie');
    if (cookieHeader) {
      headers['Cookie'] = cookieHeader;
      console.log('üç™ [AUTH-HEADERS] Cookie header encontrado:', cookieHeader.length, 'caracteres');
      
      // Tentar extrair token espec√≠fico dos cookies
      const cookies = cookieHeader.split(';').reduce((acc: Record<string, string>, cookie) => {
        const [name, value] = cookie.trim().split('=');
        if (name && value) {
          acc[name] = decodeURIComponent(value);
        }
        return acc;
      }, {});
      
      console.log('üç™ [AUTH-HEADERS] Cookies encontrados:', Object.keys(cookies));
      
      const token = cookies.auth_token || cookies.token || cookies.authToken;
      if (token && token.length > 10 && token !== 'null' && token !== 'undefined') {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('üîê [AUTH-HEADERS] Token extra√≠do dos cookies e adicionado ao Authorization header:', {
          length: token.length,
          preview: token.substring(0, 20) + '...'
        });
      } else {
        console.warn('‚ö†Ô∏è [AUTH-HEADERS] Token nos cookies inv√°lido ou n√£o encontrado:', {
          found: !!token,
          length: token ? token.length : 0,
          value: token
        });
      }
    } else {
      console.warn('‚ö†Ô∏è [AUTH-HEADERS] Nenhum cookie encontrado');
    }
  }

  // Adicionar User-Agent se existir
  const userAgent = request.headers.get('User-Agent');
  if (userAgent) {
    headers['User-Agent'] = userAgent;
  }

  // Log para debug
  console.log('üì§ [AUTH-HEADERS] Headers preparados:', {
    keys: Object.keys(headers),
    hasAuth: !!headers['Authorization'],
    hasXAuth: !!headers['X-Auth-Token'],
    hasCookie: !!headers['Cookie']
  });

  // Verifica√ß√£o final - garantir que h√° algum m√©todo de autentica√ß√£o
  if (!headers['Authorization'] && !headers['X-Auth-Token'] && !headers['Cookie']) {
    console.error('‚ùå [AUTH-HEADERS] ERRO: Nenhum m√©todo de autentica√ß√£o encontrado!');
    console.log('üîç [AUTH-HEADERS] Headers da requisi√ß√£o original:', {
      authorization: request.headers.get('Authorization'),
      xAuthToken: request.headers.get('X-Auth-Token'),
      cookie: request.headers.get('Cookie'),
      allHeaders: Array.from(request.headers.entries())
    });
  }

  return headers;
} 
