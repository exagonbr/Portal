import { NextRequest, NextResponse } from 'next/server';
import { getRedisClient } from '@/config/redis';

export async function POST(request: NextRequest) {
  try {
    const { sessionId } = await request.json();

    if (!sessionId) {
      return NextResponse.json(
        { error: 'Session ID √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    console.log(`üîÑ Redis: Iniciando invalida√ß√£o da sess√£o: ${sessionId}`);

    // Invalidate session in Redis with multiple patterns
    try {
      const redis = getRedisClient();
      
      // Padr√µes de chaves que podem existir para a sess√£o
      const sessionPatterns = [
        `session:${sessionId}`,
        `sess:${sessionId}`,
        `user_session:${sessionId}`,
        `auth_session:${sessionId}`,
        sessionId // Caso seja apenas o ID
      ];

      let deletedKeys = 0;
      
      for (const pattern of sessionPatterns) {
        try {
          const result = await redis.del(pattern);
          if (result > 0) {
            deletedKeys += result;
            console.log(`‚úÖ Redis: Chave removida: ${pattern}`);
          }
        } catch (keyError) {
          console.warn(`‚ö†Ô∏è Redis: Erro ao remover chave ${pattern}:`, keyError);
        }
      }

      // Tamb√©m tentar buscar por padr√µes usando SCAN
      try {
        const keys = await redis.keys(`*${sessionId}*`);
        if (keys.length > 0) {
          const additionalDeleted = await redis.del(...keys);
          deletedKeys += additionalDeleted;
          console.log(`‚úÖ Redis: ${additionalDeleted} chaves adicionais removidas por padr√£o`);
        }
      } catch (scanError) {
        console.warn('‚ö†Ô∏è Redis: Erro ao buscar chaves por padr√£o:', scanError);
      }

      console.log(`‚úÖ Redis: Total de ${deletedKeys} chaves removidas para sess√£o ${sessionId}`);
      
    } catch (redisError) {
      console.error('‚ùå Redis: Erro ao invalidar sess√£o:', redisError);
      // Continue even if Redis fails - don't block logout
      return NextResponse.json({ 
        success: true, 
        message: 'Sess√£o invalidada (com avisos no Redis)',
        warning: 'Erro no Redis, mas logout continuou'
      });
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Sess√£o invalidada com sucesso no Redis' 
    });

  } catch (error) {
    console.error('‚ùå API: Erro cr√≠tico ao invalidar sess√£o:', error);
    return NextResponse.json(
      { 
        success: true, // Retorna sucesso para n√£o bloquear logout
        message: 'Sess√£o invalidada (com erros recuper√°veis)',
        error: 'Erro interno, mas logout foi processado'
      },
      { status: 200 } // 200 para n√£o bloquear o logout
    );
  }
}