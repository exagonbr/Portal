/**
 * Utilit√°rio para limpar tokens inv√°lidos do localStorage
 */

export const cleanupInvalidTokens = (): void => {
  if (typeof window === 'undefined') return;

  const tokenKeys = [
    'accessToken',
    'auth_token',
    'token',
    'authToken',
    'jwt_token'
  ];

  tokenKeys.forEach(key => {
    try {
      const token = localStorage.getItem(key);
      if (token && isInvalidToken(token)) {
        console.log(`Removendo token inv√°lido: ${key}`);
        localStorage.removeItem(key);
      }
    } catch (error) {
      console.error(`Erro ao verificar token ${key}:`, error);
    }
  });
};

const isInvalidToken = (token: string): boolean => {
  // Verificar se √© null/undefined como string
  if (token === 'null' || token === 'undefined' || token === 'false' || token === 'true') {
    return true;
  }

  // Verificar se √© muito curto
  if (token.length < 10) {
    return true;
  }

  // Verificar se cont√©m caracteres inv√°lidos
  if (token.includes('\0') || token.includes('\x00') || token.includes('ÔøΩ')) {
    return true;
  }

  // Verificar se √© um JWT v√°lido (3 partes) ou token base64 v√°lido
  const parts = token.split('.');
  if (parts.length === 3) {
    // √â um JWT, verificar se as partes s√£o v√°lidas
    try {
      atob(parts[0]); // header
      atob(parts[1]); // payload
      // signature n√£o precisa ser decodificada
      return false; // JWT v√°lido
    } catch {
      return true; // JWT inv√°lido
    }
  } else {
    // Verificar se √© base64 v√°lido
    try {
      const decoded = atob(token);
      JSON.parse(decoded);
      return false; // Base64 v√°lido
    } catch {
      return true; // Base64 inv√°lido
    }
  }
};

export const logTokenInfo = (): void => {
  if (typeof window === 'undefined') return;

  const tokenKeys = [
    'accessToken',
    'auth_token',
    'token',
    'authToken',
    'jwt_token'
  ];

  console.log('üîç Informa√ß√µes dos tokens armazenados:');
  
  tokenKeys.forEach(key => {
    try {
      const token = localStorage.getItem(key);
      if (token) {
        const parts = token.split('.');
        console.log(`${key}:`, {
          length: token.length,
          preview: token.substring(0, 50) + '...',
          isJWT: parts.length === 3,
          parts: parts.length,
          isInvalid: isInvalidToken(token)
        });
      } else {
        console.log(`${key}: n√£o encontrado`);
      }
    } catch (error) {
      console.error(`Erro ao verificar ${key}:`, error);
    }
  });
}; 