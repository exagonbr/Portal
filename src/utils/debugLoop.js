#!/usr/bin/env node

/**
 * Script para debugar loops de requisi√ß√µes
 * Monitora requisi√ß√µes e identifica padr√µes suspeitos
 */

const fs = require('fs');
const path = require('path');

// Configura√ß√£o
const MONITOR_DURATION = 30000; // 30 segundos
const SUSPICIOUS_THRESHOLD = 5; // 5 requisi√ß√µes por segundo √© suspeito
const LOG_FILE = path.join(__dirname, '../logs/request-monitor.log');

// Contadores
let requestCount = 0;
let startTime = Date.now();
const requestHistory = [];

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  const timestamp = new Date().toISOString();
  const coloredMessage = `${colors[color]}${message}${colors.reset}`;
  console.log(`[${timestamp}] ${coloredMessage}`);
  
  // Salvar no arquivo de log
  try {
    const logDir = path.dirname(LOG_FILE);
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }
    fs.appendFileSync(LOG_FILE, `[${timestamp}] ${message}\n`);
  } catch (error) {
    console.log('Erro ao salvar log:', error);
  }
}

// Interceptar console.log para monitorar requisi√ß√µes
const originalConsoleLog = console.log;
console.log = function(...args) {
  const message = args.join(' ');
  
  // Detectar requisi√ß√µes de login
  if (message.includes('üîê LOGIN REQUEST START') || 
      message.includes('Middleware: Processando /api/users/login')) {
    requestCount++;
    requestHistory.push({
      timestamp: Date.now(),
      message: message.substring(0, 200) // Limitar tamanho
    });
    
    // Verificar se h√° loop suspeito
    const now = Date.now();
    const recentRequests = requestHistory.filter(req => now - req.timestamp < 1000); // √öltimo segundo
    
    if (recentRequests.length >= SUSPICIOUS_THRESHOLD) {
      log(`üö® LOOP SUSPEITO DETECTADO! ${recentRequests.length} requisi√ß√µes no √∫ltimo segundo`, 'red');
      log(`üìä Total de requisi√ß√µes: ${requestCount}`, 'yellow');
      log(`‚è±Ô∏è  Tempo decorrido: ${((now - startTime) / 1000).toFixed(1)}s`, 'yellow');
      
      // Mostrar √∫ltimas requisi√ß√µes
      log('üìã √öltimas requisi√ß√µes:', 'blue');
      recentRequests.slice(-3).forEach((req, index) => {
        log(`  ${index + 1}. ${req.message}`, 'blue');
      });
    }
  }
  
  // Chamar console.log original
  originalConsoleLog.apply(console, args);
};

// Fun√ß√£o para analisar padr√µes
function analyzePatterns() {
  const now = Date.now();
  const duration = now - startTime;
  const requestsPerSecond = (requestCount / (duration / 1000)).toFixed(2);
  
  log(`üìä AN√ÅLISE DE PADR√ïES:`, 'bold');
  log(`   Total de requisi√ß√µes: ${requestCount}`, 'blue');
  log(`   Dura√ß√£o: ${(duration / 1000).toFixed(1)}s`, 'blue');
  log(`   Requisi√ß√µes por segundo: ${requestsPerSecond}`, 'blue');
  
  if (parseFloat(requestsPerSecond) > SUSPICIOUS_THRESHOLD) {
    log(`üö® PADR√ÉO SUSPEITO: Taxa muito alta de requisi√ß√µes!`, 'red');
    return true;
  } else if (requestCount > 50) {
    log(`‚ö†Ô∏è  MUITAS REQUISI√á√ïES: Mais de 50 requisi√ß√µes detectadas`, 'yellow');
    return true;
  } else {
    log(`‚úÖ PADR√ÉO NORMAL: Taxa de requisi√ß√µes aceit√°vel`, 'green');
    return false;
  }
}

// Fun√ß√£o para gerar relat√≥rio
function generateReport() {
  const now = Date.now();
  const duration = now - startTime;
  
  const report = {
    timestamp: new Date().toISOString(),
    duration: duration,
    totalRequests: requestCount,
    requestsPerSecond: (requestCount / (duration / 1000)).toFixed(2),
    suspicious: analyzePatterns(),
    recentRequests: requestHistory.slice(-10).map(req => ({
      timestamp: new Date(req.timestamp).toISOString(),
      message: req.message
    }))
  };
  
  // Salvar relat√≥rio
  try {
    const reportFile = path.join(__dirname, '../logs/loop-analysis-report.json');
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    log(`üìÑ Relat√≥rio salvo em: ${reportFile}`, 'green');
  } catch (error) {
    log(`‚ùå Erro ao salvar relat√≥rio: ${error.message}`, 'red');
  }
  
  return report;
}

// Iniciar monitoramento
log(`üîç INICIANDO MONITORAMENTO DE LOOPS`, 'bold');
log(`‚è±Ô∏è  Dura√ß√£o: ${MONITOR_DURATION / 1000}s`, 'blue');
log(`üö® Limite suspeito: ${SUSPICIOUS_THRESHOLD} req/s`, 'yellow');
log(`üìÅ Logs salvos em: ${LOG_FILE}`, 'blue');

// Timer para an√°lise peri√≥dica
const analysisInterval = setInterval(() => {
  if (requestCount > 0) {
    analyzePatterns();
  }
}, 5000); // A cada 5 segundos

// Timer para finalizar monitoramento
setTimeout(() => {
  clearInterval(analysisInterval);
  
  log(`üèÅ MONITORAMENTO FINALIZADO`, 'bold');
  const report = generateReport();
  
  if (report.suspicious) {
    log(`üö® RESULTADO: Loop suspeito detectado!`, 'red');
    log(`üí° RECOMENDA√á√ÉO: Verificar c√≥digo que faz requisi√ß√µes autom√°ticas`, 'yellow');
  } else {
    log(`‚úÖ RESULTADO: Nenhum loop detectado`, 'green');
  }
  
  process.exit(0);
}, MONITOR_DURATION);

// Capturar Ctrl+C para gerar relat√≥rio antes de sair
process.on('SIGINT', () => {
  log(`\n‚èπÔ∏è  MONITORAMENTO INTERROMPIDO PELO USU√ÅRIO`, 'yellow');
  clearInterval(analysisInterval);
  generateReport();
  process.exit(0);
});

log(`‚úÖ Monitor ativo. Pressione Ctrl+C para parar.`, 'green'); 