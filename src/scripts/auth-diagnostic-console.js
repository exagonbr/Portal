/**
 * Script de diagn√≥stico de autentica√ß√£o para console do navegador
 * Cole este script no console do navegador para diagnosticar problemas de autentica√ß√£o
 */

(function() {
  console.log('üîç INICIANDO DIAGN√ìSTICO DE AUTENTICA√á√ÉO...');

  // Fun√ß√£o para verificar token no localStorage e sessionStorage
  function checkTokenStorage() {
    console.group('1Ô∏è‚É£ Verificando tokens armazenados');
    
    const tokenKeys = ['accessToken', 'auth_token', 'token', 'authToken', 'jwt'];
    let foundToken = null;
    let tokenSource = null;
    
    // Verificar localStorage
    console.group('localStorage:');
    tokenKeys.forEach(key => {
      const value = localStorage.getItem(key);
      if (value) {
        console.log(`‚úÖ ${key}: ${value.substring(0, 15)}...`);
        if (!foundToken) {
          foundToken = value;
          tokenSource = `localStorage.${key}`;
        }
      } else {
        console.log(`‚ùå ${key}: n√£o encontrado`);
      }
    });
    console.groupEnd();
    
    // Verificar sessionStorage
    console.group('sessionStorage:');
    tokenKeys.forEach(key => {
      const value = sessionStorage.getItem(key);
      if (value) {
        console.log(`‚úÖ ${key}: ${value.substring(0, 15)}...`);
        if (!foundToken) {
          foundToken = value;
          tokenSource = `sessionStorage.${key}`;
        }
      } else {
        console.log(`‚ùå ${key}: n√£o encontrado`);
      }
    });
    console.groupEnd();
    
    // Resumo
    if (foundToken) {
      console.log(`‚úÖ Token encontrado em: ${tokenSource}`);
    } else {
      console.log('‚ùå Nenhum token encontrado em localStorage ou sessionStorage');
    }
    
    console.groupEnd();
    return { token: foundToken, source: tokenSource };
  }
  
  // Fun√ß√£o para analisar token JWT
  function analyzeToken(token) {
    if (!token) {
      console.log('‚ùå Nenhum token para analisar');
      return null;
    }
    
    console.group('2Ô∏è‚É£ Analisando token');
    
    // Verificar formato
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.log(`‚ùå Formato inv√°lido: token tem ${parts.length} partes, deveria ter 3`);
      console.groupEnd();
      return null;
    }
    
    try {
      // Decodificar header
      const header = JSON.parse(atob(parts[0]));
      console.log('‚úÖ Header:', header);
      
      // Decodificar payload
      const payload = JSON.parse(atob(parts[1]));
      console.log('‚úÖ Payload:', payload);
      
      // Verificar expira√ß√£o
      if (payload.exp) {
        const expDate = new Date(payload.exp * 1000);
        const now = new Date();
        const isExpired = expDate < now;
        
        if (isExpired) {
          console.log(`‚ùå Token EXPIRADO em: ${expDate.toLocaleString()}`);
        } else {
          const timeLeft = Math.round((expDate.getTime() - now.getTime()) / 1000 / 60);
          console.log(`‚úÖ Token v√°lido at√©: ${expDate.toLocaleString()} (${timeLeft} minutos restantes)`);
        }
      } else {
        console.log('‚ö†Ô∏è Token n√£o possui data de expira√ß√£o');
      }
      
      console.groupEnd();
      return payload;
    } catch (error) {
      console.log('‚ùå Erro ao decodificar token:', error);
      console.groupEnd();
      return null;
    }
  }
  
  // Fun√ß√£o para testar requisi√ß√£o autenticada
  async function testAuthenticatedRequest(token) {
    if (!token) {
      console.log('‚ùå Sem token para testar requisi√ß√£o');
      return false;
    }
    
    console.group('3Ô∏è‚É£ Testando requisi√ß√£o autenticada');
    
    try {
      console.log('üîÑ Enviando requisi√ß√£o de teste para /api/auth/me...');
      
      const response = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Requisi√ß√£o bem-sucedida:', data);
        console.groupEnd();
        return true;
      } else {
        console.log(`‚ùå Erro ${response.status}: ${response.statusText}`);
        
        if (response.status === 401) {
          console.log('‚ùå Token n√£o autorizado (401) - provavelmente inv√°lido ou expirado');
        }
        
        console.groupEnd();
        return false;
      }
    } catch (error) {
      console.log('‚ùå Erro ao fazer requisi√ß√£o:', error);
      console.groupEnd();
      return false;
    }
  }
  
  // Fun√ß√£o para limpar dados de autentica√ß√£o
  function clearAuthData() {
    console.group('üßπ Limpando dados de autentica√ß√£o');
    
    // Limpar localStorage
    ['accessToken', 'auth_token', 'token', 'authToken', 'jwt', 'refreshToken', 'user', 'userData'].forEach(key => {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Removido ${key} do localStorage`);
    });
    
    // Limpar sessionStorage
    ['accessToken', 'auth_token', 'token', 'authToken', 'jwt'].forEach(key => {
      sessionStorage.removeItem(key);
      console.log(`üóëÔ∏è Removido ${key} do sessionStorage`);
    });
    
    console.log('‚úÖ Todos os dados de autentica√ß√£o foram limpos');
    console.groupEnd();
  }
  
  // Fun√ß√£o principal de diagn√≥stico
  async function runDiagnostic() {
    console.log('üîÑ Executando diagn√≥stico completo...');
    
    // Verificar armazenamento
    const { token, source } = checkTokenStorage();
    
    // Analisar token
    const payload = analyzeToken(token);
    
    // Testar requisi√ß√£o
    const requestSuccess = await testAuthenticatedRequest(token);
    
    // Resumo e recomenda√ß√µes
    console.group('üìã Resumo do diagn√≥stico');
    
    if (!token) {
      console.log('‚ùå Problema: Nenhum token encontrado');
      console.log('üëâ Recomenda√ß√£o: Fa√ßa login novamente para obter um novo token');
    } else if (!payload) {
      console.log('‚ùå Problema: Token com formato inv√°lido');
      console.log('üëâ Recomenda√ß√£o: Limpe os dados de autentica√ß√£o e fa√ßa login novamente');
    } else if (payload.exp && new Date(payload.exp * 1000) < new Date()) {
      console.log('‚ùå Problema: Token expirado');
      console.log('üëâ Recomenda√ß√£o: Fa√ßa login novamente para obter um novo token');
    } else if (!requestSuccess) {
      console.log('‚ùå Problema: Token n√£o aceito pelo servidor');
      console.log('üëâ Recomenda√ß√£o: Verifique se o token √© v√°lido ou fa√ßa login novamente');
    } else {
      console.log('‚úÖ Autentica√ß√£o parece estar funcionando corretamente');
    }
    
    console.groupEnd();
    
    // Disponibilizar fun√ß√µes √∫teis
    window.authDiagnostic = {
      checkTokenStorage,
      analyzeToken,
      testAuthenticatedRequest,
      clearAuthData,
      runDiagnostic
    };
    
    console.log('\nüõ†Ô∏è Fun√ß√µes de diagn√≥stico dispon√≠veis:');
    console.log('- authDiagnostic.checkTokenStorage() - Verificar tokens armazenados');
    console.log('- authDiagnostic.analyzeToken(token) - Analisar token espec√≠fico');
    console.log('- authDiagnostic.testAuthenticatedRequest(token) - Testar requisi√ß√£o');
    console.log('- authDiagnostic.clearAuthData() - Limpar dados de autentica√ß√£o');
    console.log('- authDiagnostic.runDiagnostic() - Executar diagn√≥stico completo');
  }
  
  // Executar diagn√≥stico
  runDiagnostic();
})(); 