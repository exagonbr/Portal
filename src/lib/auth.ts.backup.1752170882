import type { NextAuthOptions } from 'next-auth';
import type { JWT } from 'next-auth/jwt';
import type { Session } from 'next-auth';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import { getInternalApiUrl } from '@/config/urls';

// Estender os tipos do NextAuth para incluir role e permissions
declare module 'next-auth' {
  interface User {
    role?: string;
    permissions?: string[];
  }
}

// Fun√ß√£o para detectar se devemos usar cookies seguros
function shouldUseSecureCookies(): boolean {
  const isProduction = process.env.NODE_ENV === 'production';
  const nextAuthUrl = process.env.NEXTAUTH_URL || '';
  const isHttps = nextAuthUrl.startsWith('https://');
  
  // Em produ√ß√£o com HTTPS, sempre usar cookies seguros
  const shouldUseSecure = isProduction && isHttps;
  
  // Debug logging
  console.log('üç™ Cookie Security Check:', {
    NODE_ENV: process.env.NODE_ENV,
    NEXTAUTH_URL: nextAuthUrl,
    isProduction,
    isHttps,
    shouldUseSecure
  });
  
  return shouldUseSecure;
}

export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || '',
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
    }),
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        try {
          // Fazer requisi√ß√£o para o backend de autentica√ß√£o
          const response = await fetch(getInternalApiUrl('/users/login'), {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: credentials.email,
              password: credentials.password,
            }),
          });

          if (!response.ok) {
            return null;
          }

          const data = await response.json();
          
          if (data.success && data.data && data.data.user) {
            return {
              id: data.data.user.id,
              email: data.data.user.email,
              name: data.data.user.name,
              role: data.data.user.role.toUpperCase() || 'STUDENT',
              permissions: data.data.user.permissions || [],
            };
          }
          
          return null;
        } catch (error) {
          return null;
        }
      }
    }),
  ],
  callbacks: {
    async signIn({ user, account, profile }) {
      // Para login com Google, verificar/criar usu√°rio no backend
      if (account?.provider === 'google') {
        try {
          const response = await fetch('https://portal.sabercon.com.br/api/auth/google-signin', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: user.email,
              name: user.name,
              googleId: user.id,
              image: user.image,
            }),
          });

          if (response.ok) {
            const data = await response.json();
            if (data.success && data.data && data.data.user) {
              /* Adicionar informa√ß√µes do backend ao usu√°rio
              user.role = data.data.user.role?.toUpperCase() || 'STUDENT';
              user.permissions = data.data.user.permissions || [];
              user.id = data.data.user.id; **/
              return true;
            }
          }
          
          // Se n√£o conseguir criar/buscar no backend, ainda permitir login
          // mas com role padr√£o
          user.role = 'STUDENT';
          user.permissions = [
            'students.communicate',
            'schedule.view.own',
            'grades.view.own',
            'materials.access',
            'assignments.submit',
            'progress.track.own',
            'teachers.message',
            'announcements.receive'
          ];
          return true;
        } catch (error) {
          console.error('Erro ao processar login do Google:', error);
          // Ainda permitir login mesmo com erro
          user.role = 'STUDENT';
          user.permissions = [];
          return true;
        }
      }
      return true;
    },
    async jwt({ token, user }: { token: JWT; user: any }) {
      if (user) {
        token.role = user.role?.toUpperCase() || 'STUDENT';
        token.permissions = user.permissions || [
          'students.communicate',
          'schedule.view.own',
          'grades.view.own',
          'materials.access',
          'assignments.submit',
          'progress.track.own',
          'teachers.message',
          'announcements.receive'
        ];
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }: { session: Session; token: JWT }) {
      if (session.user) {
        (session.user as any).role = token.role;
        (session.user as any).permissions = token.permissions;
        (session.user as any).id = token.id;
      }
      return session;
    },
  },
  pages: {
    signIn: '/auth/login',
    error: '/auth/login',
  },
  session: {
    strategy: 'jwt',
    maxAge: 24 * 60 * 60, // 24 horas
    updateAge: 24 * 60 * 60, // Atualizar a cada 24 horas
  },
  // Configura√ß√£o de cookies adaptativa - usa prefixos seguros apenas quando apropriado
  cookies: (() => {
    const useSecure = shouldUseSecureCookies();
    // Para produ√ß√£o HTTPS, n√£o definir dom√≠nio para cookies __Host- funcionarem corretamente
    const domain = undefined; // Removido dom√≠nio espec√≠fico para evitar problemas
    
    console.log('üç™ Configurando cookies com:', { useSecure, domain });
    
    return {
      sessionToken: {
        name: useSecure ? '__Secure-next-auth.session-token' : 'next-auth.session-token',
        options: {
          httpOnly: true,
          sameSite: 'lax',
          path: '/',
          secure: useSecure,
          domain: domain
        }
      },
      callbackUrl: {
        name: useSecure ? '__Secure-next-auth.callback-url' : 'next-auth.callback-url',
        options: {
          httpOnly: true,
          sameSite: 'lax',
          path: '/',
          secure: useSecure,
          domain: domain
        }
      },
      csrfToken: {
        name: useSecure ? '__Host-next-auth.csrf-token' : 'next-auth.csrf-token',
        options: {
          httpOnly: true,
          sameSite: 'lax',
          path: '/',
          secure: useSecure,
          // __Host- prefix requires domain to be undefined
          domain: undefined
        }
      },
      state: {
        name: useSecure ? '__Secure-next-auth.state' : 'next-auth.state',
        options: {
          httpOnly: true,
          sameSite: 'lax',
          path: '/',
          secure: useSecure,
          maxAge: 900, // 15 minutes
          domain: domain
        }
      },
      nonce: {
        name: useSecure ? '__Secure-next-auth.nonce' : 'next-auth.nonce',
        options: {
          httpOnly: true,
          sameSite: 'lax',
          path: '/',
          secure: useSecure,
          domain: domain
        }
      }
    };
  })(),
  // Configura√ß√µes de seguran√ßa
  useSecureCookies: shouldUseSecureCookies(),
  secret: process.env.JWT_SECRET,
  debug: false
};