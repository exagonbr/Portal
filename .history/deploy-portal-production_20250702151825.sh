#!/bin/bash

# Portal Sabercon - Script de Deploy para Produ√ß√£o
# Frontend: https://portal.sabercon.com.br
# Backend API: https://portal.sabercon.com.br/api

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

# Fun√ß√£o para verificar se comando foi executado com sucesso
check_status() {
    if [ $? -eq 0 ]; then
        log_success "$1"
    else
        log_error "Falha: $1"
        exit 1
    fi
}

# Verificar se est√° executando como root ou com sudo
if [ "$EUID" -ne 0 ]; then
    log_error "Este script deve ser executado como root ou com sudo"
    exit 1
fi

# Configura√ß√µes
DOMAIN="portal.sabercon.com.br"
FRONTEND_PORT=3000
BACKEND_PORT=3001
NGINX_CONFIG="/etc/nginx/nginx.conf"
SITE_CONFIG="/etc/nginx/sites-available/default"

# Detectar diret√≥rio do projeto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$SCRIPT_DIR"

# Se executado de um diret√≥rio diferente, perguntar qual usar
if [ ! -f "$PROJECT_DIR/package.json" ] || [ ! -d "$PROJECT_DIR/backend" ]; then
    log_error "‚ùå Estrutura do projeto n√£o encontrada no diret√≥rio atual: $PROJECT_DIR"
    echo ""
    log "üîç Procurando estrutura do projeto..."
    
    # Verificar diret√≥rios comuns
    POSSIBLE_DIRS=(
        "/var/www/portal"
        "/home/ubuntu/portal"
        "/home/portal"
        "/opt/portal"
        "$HOME/portal"
        "$(pwd)"
    )
    
    FOUND_DIR=""
    for dir in "${POSSIBLE_DIRS[@]}"; do
        if [ -f "$dir/package.json" ] && [ -d "$dir/backend" ]; then
            FOUND_DIR="$dir"
            break
        fi
    done
    
    if [ -n "$FOUND_DIR" ]; then
        log_success "‚úÖ Projeto encontrado em: $FOUND_DIR"
        PROJECT_DIR="$FOUND_DIR"
    else
        echo ""
        log_error "‚ùå Projeto n√£o encontrado automaticamente."
        echo ""
        echo "üìÅ Op√ß√µes:"
        echo "   1. Executar o script no diret√≥rio do projeto"
        echo "   2. Clonar o projeto primeiro:"
        echo "      sudo mkdir -p /var/www/portal"
        echo "      sudo git clone <seu-repositorio> /var/www/portal"
        echo "      cd /var/www/portal"
        echo "      sudo bash deploy-portal-production.sh"
        echo ""
        read -p "Digite o caminho completo do diret√≥rio do projeto (ou ENTER para sair): " CUSTOM_DIR
        
        if [ -z "$CUSTOM_DIR" ]; then
            log "üëã Deploy cancelado pelo usu√°rio"
            exit 0
        fi
        
        if [ ! -d "$CUSTOM_DIR" ]; then
            log_error "Diret√≥rio n√£o existe: $CUSTOM_DIR"
            exit 1
        fi
        
        if [ ! -f "$CUSTOM_DIR/package.json" ] || [ ! -d "$CUSTOM_DIR/backend" ]; then
            log_error "Estrutura do projeto n√£o encontrada em: $CUSTOM_DIR"
            log_error "Certifique-se de que o diret√≥rio cont√©m package.json e pasta backend/"
            exit 1
        fi
        
        PROJECT_DIR="$CUSTOM_DIR"
    fi
fi

log "üöÄ Iniciando deploy do Portal Sabercon para produ√ß√£o..."
log "üìç Dom√≠nio: $DOMAIN"
log "üñ•Ô∏è  Frontend: https://$DOMAIN (porta $FRONTEND_PORT)"
log "üîß Backend API: https://$DOMAIN/api (porta $BACKEND_PORT)"
log "üìÅ Diret√≥rio do projeto: $PROJECT_DIR"
echo ""

cd "$PROJECT_DIR"

# Verificar depend√™ncias b√°sicas do sistema
log "üîç Verificando depend√™ncias b√°sicas do sistema..."

# Verificar e corrigir problemas cr√≠ticos do sistema
log "üîç Verificando integridade do sistema..."

# Primeiro, tentar atualizar reposit√≥rios
if ! apt update 2>/dev/null; then
    log_warning "‚ö†Ô∏è  Problemas detectados no sistema, executando corre√ß√£o autom√°tica..."
    
    # Parar processos apt/dpkg travados
    log "üîß Parando processos apt/dpkg travados..."
    killall apt apt-get dpkg 2>/dev/null || true
    sleep 2
    
    # Remover locks
    log "üîß Removendo locks do sistema..."
    rm -f /var/lib/dpkg/lock-frontend 2>/dev/null || true
    rm -f /var/lib/apt/lists/lock 2>/dev/null || true
    rm -f /var/cache/apt/archives/lock 2>/dev/null || true
    rm -f /var/lib/dpkg/lock 2>/dev/null || true
    
    # Verificar se h√° processos dpkg travados
    if pgrep -f dpkg > /dev/null; then
        log_warning "üîß For√ßando t√©rmino de processos dpkg travados..."
        pkill -9 -f dpkg 2>/dev/null || true
        sleep 3
    fi
    
    # Tentar configurar pacotes pendentes
    log "üîß Configurando pacotes pendentes..."
    if ! dpkg --configure -a 2>/dev/null; then
        log_warning "‚ö†Ô∏è  Removendo pacotes GRUB problem√°ticos (seguro em VPS)..."
        
        # Remover pacotes GRUB problem√°ticos (comum em VPS)
        apt-get remove --purge grub-efi-amd64-signed shim-signed -y 2>/dev/null || true
        apt-get remove --purge grub-efi-amd64 grub-efi-amd64-bin -y 2>/dev/null || true
        apt-get remove --purge grub-common grub2-common -y 2>/dev/null || true
        
        # Tentar configurar novamente ap√≥s remo√ß√£o
        dpkg --configure -a 2>/dev/null || true
    fi
    
    # Corrigir depend√™ncias quebradas
    log "üîß Corrigindo depend√™ncias quebradas..."
    apt-get install -f -y 2>/dev/null || true
    
    # Limpar cache
    apt-get clean
    apt-get autoclean
    
    log_success "‚úÖ Corre√ß√£o de sistema conclu√≠da"
fi

# Atualizar reposit√≥rios ap√≥s corre√ß√£o
log "üì¶ Atualizando reposit√≥rios do sistema..."
apt update
check_status "Reposit√≥rios atualizados"

# Verifica√ß√£o final da integridade
log "üîç Verifica√ß√£o final da integridade dos pacotes..."
if ! apt list --installed > /dev/null 2>&1; then
    log_error "‚ùå Sistema APT ainda com problemas cr√≠ticos"
    log_error "Execute manualmente o script de corre√ß√£o:"
    log_error "sudo bash fix-grub-dpkg-error.sh"
    exit 1
fi

check_status "Reposit√≥rios atualizados"

# Instalar depend√™ncias b√°sicas
log "üì¶ Instalando depend√™ncias b√°sicas..."
apt install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release ufw git build-essential
check_status "Depend√™ncias b√°sicas instaladas"

# Parar servi√ßos
log "‚èπÔ∏è  Parando servi√ßos..."
systemctl stop nginx 2>/dev/null || true
pm2 delete all 2>/dev/null || true
check_status "Servi√ßos parados"

# Atualizar c√≥digo
log "üì• Atualizando c√≥digo do reposit√≥rio..."
git fetch --all
git reset --hard origin/new_release
check_status "C√≥digo atualizado"

# Configurar vari√°veis de ambiente
log "‚öôÔ∏è  Configurando vari√°veis de ambiente..."

# Copiar arquivo de produ√ß√£o para frontend
if [ -f "env.production.portal" ]; then
    cp env.production.portal .env.production
    log_success "Arquivo .env.production configurado"
else
    log_warning "Arquivo env.production.portal n√£o encontrado"
fi

# Copiar arquivo de produ√ß√£o para backend
if [ -f "backend/env.production.portal" ]; then
    cp backend/env.production.portal backend/.env.production
    log_success "Arquivo backend/.env.production configurado"
else
    log_warning "Arquivo backend/env.production.portal n√£o encontrado"
fi

# Verificar e instalar Node.js e PM2
log "üîß Verificando depend√™ncias do sistema..."

# Verificar se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    log "üì¶ Node.js n√£o encontrado. Instalando..."
    
    # Instalar Node.js via NodeSource
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt install -y nodejs
    check_status "Node.js instalado"
    
    log_success "Node.js $(node --version) instalado com sucesso"
else
    log_success "Node.js $(node --version) j√° est√° instalado"
fi

# Verificar se PM2 est√° instalado
if ! command -v pm2 &> /dev/null; then
    log "üì¶ PM2 n√£o encontrado. Instalando..."
    
    npm install -g pm2
    check_status "PM2 instalado"
    
    log_success "PM2 instalado com sucesso"
else
    log_success "PM2 j√° est√° instalado"
fi

# Verificar se PostgreSQL est√° instalado
if ! command -v psql &> /dev/null; then
    log "üì¶ PostgreSQL n√£o encontrado. Instalando..."
    
    apt install -y postgresql postgresql-contrib
    check_status "PostgreSQL instalado"
    
    # Iniciar e habilitar PostgreSQL
    systemctl start postgresql
    systemctl enable postgresql
    
    log_success "PostgreSQL instalado e iniciado"
    log_warning "‚ö†Ô∏è  Configure o banco de dados PostgreSQL manualmente:"
    log_warning "   sudo -u postgres createuser --interactive portal_user"
    log_warning "   sudo -u postgres createdb portal_sabercon"
    log_warning "   sudo -u postgres psql -c \"ALTER USER portal_user PASSWORD 'sua_senha_aqui';\""
else
    log_success "PostgreSQL j√° est√° instalado"
fi

# Verificar se Redis est√° instalado
if ! command -v redis-server &> /dev/null; then
    log "üì¶ Redis n√£o encontrado. Instalando..."
    
    apt install -y redis-server
    check_status "Redis instalado"
    
    # Iniciar e habilitar Redis
    systemctl start redis-server
    systemctl enable redis-server
    
    log_success "Redis instalado e iniciado"
else
    log_success "Redis j√° est√° instalado"
    
    # Verificar se est√° rodando
    if ! systemctl is-active --quiet redis-server; then
        systemctl start redis-server
        log_success "Redis iniciado"
    fi
fi

# Instalar depend√™ncias
log "üì¶ Instalando depend√™ncias do projeto..."
npm ci --only=production
check_status "Depend√™ncias frontend instaladas"

cd backend
npm ci --only=production
cd ..
check_status "Depend√™ncias backend instaladas"

# Build das aplica√ß√µes
log "üî® Fazendo build do frontend..."
npm run build
check_status "Build frontend conclu√≠do"

log "üî® Fazendo build do backend..."
cd backend
npm run build
cd ..
check_status "Build backend conclu√≠do"

# Instalar e configurar Nginx
log "üåê Verificando e instalando Nginx..."

# Verificar se o Nginx est√° instalado
if ! command -v nginx &> /dev/null; then
    log "üì¶ Nginx n√£o encontrado. Instalando..."
    
    # Instalar Nginx
    apt install -y nginx
    check_status "Nginx instalado"
    
    # Parar Nginx para configura√ß√£o
    systemctl stop nginx
    
    log_success "Nginx instalado com sucesso"
else
    log_success "Nginx j√° est√° instalado"
fi

# Verificar se certbot est√° instalado (para SSL)
if ! command -v certbot &> /dev/null; then
    log "üîí Certbot n√£o encontrado. Instalando..."
    
    # Instalar snapd se n√£o estiver instalado
    if ! command -v snap &> /dev/null; then
        apt install -y snapd
        check_status "Snapd instalado"
    fi
    
    # Instalar certbot via snap
    snap install --classic certbot
    
    # Criar link simb√≥lico
    ln -sf /snap/bin/certbot /usr/bin/certbot
    check_status "Certbot instalado"
    
    log_success "Certbot instalado com sucesso"
else
    log_success "Certbot j√° est√° instalado"
fi

log "‚öôÔ∏è  Configurando Nginx..."

# Backup da configura√ß√£o atual
if [ -f "$NGINX_CONFIG" ]; then
    cp "$NGINX_CONFIG" "${NGINX_CONFIG}.backup.$(date +%Y%m%d_%H%M%S)"
    log_success "Backup do Nginx criado"
fi

# Copiar nova configura√ß√£o
if [ -f "nginx-production-config.conf" ]; then
    cp nginx-production-config.conf "$NGINX_CONFIG"
    log_success "Configura√ß√£o do Nginx atualizada"
else
    log_error "Arquivo nginx-production-config.conf n√£o encontrado"
    exit 1
fi

# Criar diret√≥rio de cache
mkdir -p /var/cache/nginx/portal
chown -R www-data:www-data /var/cache/nginx/portal
check_status "Diret√≥rio de cache criado"

# Testar configura√ß√£o do Nginx
log "üß™ Testando configura√ß√£o do Nginx..."
nginx -t
check_status "Configura√ß√£o do Nginx v√°lida"

# Executar migra√ß√µes do banco de dados
log "üóÑÔ∏è  Executando migra√ß√µes do banco de dados..."
cd backend
npm run migrate 2>/dev/null || true
check_status "Migra√ß√µes executadas"
cd ..

# Configurar PM2
log "üîÑ Configurando PM2..."

# Criar diret√≥rio de logs
mkdir -p logs
chmod 755 logs

# Iniciar aplica√ß√µes com PM2
pm2 start ecosystem.config.js --env production
check_status "Aplica√ß√µes iniciadas com PM2"

# Configurar PM2 para iniciar automaticamente
pm2 startup
pm2 save
check_status "PM2 configurado para inicializa√ß√£o autom√°tica"

# Iniciar Nginx
log "üåê Iniciando Nginx..."
systemctl start nginx
systemctl enable nginx
check_status "Nginx iniciado"

# Configurar firewall
log "üî• Configurando firewall..."
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 22/tcp
ufw --force enable
check_status "Firewall configurado"

# Verificar status dos servi√ßos
log "üîç Verificando status dos servi√ßos..."

# Verificar PM2
log "üìä Status PM2:"
pm2 status

# Verificar Nginx
if systemctl is-active --quiet nginx; then
    log_success "Nginx est√° rodando"
else
    log_error "Nginx n√£o est√° rodando"
fi

# Verificar se as portas est√£o abertas
if netstat -tuln | grep -q ":$FRONTEND_PORT "; then
    log_success "Frontend rodando na porta $FRONTEND_PORT"
else
    log_warning "Frontend pode n√£o estar rodando na porta $FRONTEND_PORT"
fi

if netstat -tuln | grep -q ":$BACKEND_PORT "; then
    log_success "Backend rodando na porta $BACKEND_PORT"
else
    log_warning "Backend pode n√£o estar rodando na porta $BACKEND_PORT"
fi

# Teste de conectividade
log "üåê Testando conectividade..."

# Testar frontend
if curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN" | grep -q "200\|301\|302"; then
    log_success "Frontend acess√≠vel em https://$DOMAIN"
else
    log_warning "Frontend pode n√£o estar acess√≠vel"
fi

# Testar backend API
if curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN/api/health" | grep -q "200"; then
    log_success "Backend API acess√≠vel em https://$DOMAIN/api"
else
    log_warning "Backend API pode n√£o estar acess√≠vel"
fi

# Limpeza
log "üßπ Limpando arquivos tempor√°rios..."
npm cache clean --force 2>/dev/null || true
find . -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
check_status "Limpeza conclu√≠da"

# Configurar SSL (opcional)
echo ""
log "üîí Configura√ß√£o SSL"
read -p "Deseja configurar SSL automaticamente com Let's Encrypt? (y/N): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "üìú Configurando SSL com Let's Encrypt..."
    
    # Verificar se o dom√≠nio est√° apontando para este servidor
    log "üåê Verificando DNS do dom√≠nio..."
    DOMAIN_IP=$(dig +short $DOMAIN)
    SERVER_IP=$(curl -s ifconfig.me)
    
    if [ "$DOMAIN_IP" = "$SERVER_IP" ]; then
        log_success "DNS configurado corretamente"
        
        # Configurar SSL
        certbot --nginx -d "$DOMAIN" -d "www.$DOMAIN" --non-interactive --agree-tos --email admin@$DOMAIN
        check_status "SSL configurado"
        
        # Recarregar Nginx
        systemctl reload nginx
        check_status "Nginx recarregado com SSL"
        
        log_success "SSL configurado com sucesso!"
    else
        log_warning "‚ö†Ô∏è  DNS n√£o est√° apontando para este servidor"
        log_warning "   Dom√≠nio aponta para: $DOMAIN_IP"
        log_warning "   IP do servidor: $SERVER_IP"
        log_warning "   Configure o DNS primeiro e execute: certbot --nginx -d $DOMAIN -d www.$DOMAIN"
    fi
else
    log "‚è≠Ô∏è  SSL n√£o configurado. Para configurar depois, execute:"
    log "   certbot --nginx -d $DOMAIN -d www.$DOMAIN"
fi

echo ""
log_success "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üìã Resumo do Deploy:"
echo "   ‚Ä¢ Frontend: https://$DOMAIN"
echo "   ‚Ä¢ Backend API: https://$DOMAIN/api"
echo "   ‚Ä¢ Health Check: https://$DOMAIN/_health"
echo "   ‚Ä¢ API Health: https://$DOMAIN/api/health"
echo ""
echo "üîß Comandos √∫teis:"
echo "   ‚Ä¢ Ver logs: pm2 logs"
echo "   ‚Ä¢ Reiniciar: pm2 restart all"
echo "   ‚Ä¢ Status: pm2 status"
echo "   ‚Ä¢ Nginx logs: tail -f /var/log/nginx/error.log"
echo "   ‚Ä¢ SSL renova√ß√£o: certbot renew"
echo ""
echo "üß™ Teste agora:"
echo "   ‚Ä¢ Frontend: https://$DOMAIN"
echo "   ‚Ä¢ API: https://$DOMAIN/api/health"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "   1. Configure as vari√°veis de ambiente nos arquivos .env"
echo "   2. Configure o banco de dados PostgreSQL"
echo "   3. Execute as migra√ß√µes se necess√°rio"
echo "   4. Configure o SSL se n√£o foi feito automaticamente"
echo ""

log_success "Deploy finalizado! ‚ú®" 