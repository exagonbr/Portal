#!/usr/bin/env node

/**
 * Script final para mapear e testar todas as rotas de API
 * Vers√£o simplificada e funcional
 * Autor: Kilo Code
 * Data: 2025-01-07
 */

const fs = require('fs');
const path = require('path');
const https = require('https');
const http = require('http');

// Configura√ß√µes
const CONFIG = {
  baseUrl: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000',
  credentials: {
    email: 'admin@sabercon.edu.br',
    password: 'password123'
  },
  timeout: 15000,
  delay: 200
};

// Cores para terminal
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Fun√ß√£o para fazer requisi√ß√µes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'API-Route-Mapper/1.0',
        ...options.headers
      },
      timeout: CONFIG.timeout
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : {};
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: jsonData,
            raw: data
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: null,
            raw: data,
            parseError: error.message
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// Fun√ß√£o para descobrir rotas recursivamente
function discoverRoutes(dir, basePath = '') {
  const routes = [];
  
  try {
    const items = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const item of items) {
      const fullPath = path.join(dir, item.name);
      const routePath = path.join(basePath, item.name);
      
      if (item.isDirectory()) {
        if (item.name.startsWith('[') && item.name.endsWith(']')) {
          const paramName = item.name.slice(1, -1);
          let dynamicPath;
          
          if (paramName.startsWith('...')) {
            dynamicPath = routePath.replace(`[${paramName}]`, '*');
          } else {
            dynamicPath = routePath.replace(`[${paramName}]`, `:${paramName}`);
          }
          
          routes.push(...discoverRoutes(fullPath, dynamicPath));
        } else {
          routes.push(...discoverRoutes(fullPath, routePath));
        }
      } else if (item.name === 'route.ts' || item.name === 'route.js') {
        const routeInfo = analyzeRouteFile(fullPath);
        const cleanPath = basePath.replace(/\\/g, '/') || '/';
        
        routes.push({
          path: cleanPath,
          file: fullPath,
          methods: routeInfo.methods,
          hasAuth: routeInfo.hasAuth,
          description: routeInfo.description
        });
      }
    }
  } catch (error) {
    log(`Erro ao ler diret√≥rio ${dir}: ${error.message}`, 'red');
  }
  
  return routes;
}

// Fun√ß√£o para analisar arquivo de rota
function analyzeRouteFile(filePath) {
  const methods = [];
  let hasAuth = false;
  let description = '';
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    const httpMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'];
    for (const method of httpMethods) {
      if (content.includes(`export async function ${method}`) || 
          content.includes(`export function ${method}`)) {
        methods.push(method);
      }
    }
    
    const authKeywords = [
      'auth', 'token', 'jwt', 'session', 'Authorization',
      'Bearer', 'authenticate', 'validateToken', 'checkAuth'
    ];
    
    hasAuth = authKeywords.some(keyword => 
      content.toLowerCase().includes(keyword.toLowerCase())
    );
    
    const commentMatches = content.match(/\/\*\*([\s\S]*?)\*\//g);
    if (commentMatches && commentMatches.length > 0) {
      description = commentMatches[0]
        .replace(/\/\*\*|\*\//g, '')
        .replace(/\*/g, '')
        .replace(/\n/g, ' ')
        .trim()
        .substring(0, 100);
    }
    
  } catch (error) {
    log(`Erro ao analisar arquivo ${filePath}: ${error.message}`, 'yellow');
  }
  
  return { methods, hasAuth, description };
}

// Fun√ß√£o para fazer login
async function authenticate() {
  log('\nüîê Fazendo login...', 'cyan');
  
  try {
    const response = await makeRequest(`${CONFIG.baseUrl}/api/auth/login`, {
      method: 'POST',
      body: CONFIG.credentials
    });
    
    if (response.status === 200 && response.data?.success) {
      log('‚úÖ Login realizado com sucesso!', 'green');
      log(`üë§ Usu√°rio: ${response.data.data?.user?.email || 'N/A'}`, 'gray');
      log(`üé≠ Papel: ${response.data.data?.user?.role || 'N/A'}`, 'gray');
      log(`üè¢ Institui√ß√£o: ${response.data.data?.user?.institutionId || 'N/A'}`, 'gray');
      
      // Corrigir os nomes dos campos baseado na an√°lise do login route
      return {
        token: response.data.data?.accessToken, // Campo correto √© accessToken
        refreshToken: response.data.data?.refreshToken,
        sessionId: response.data.data?.sessionId,
        user: response.data.data?.user,
        success: true
      };
    } else {
      log(`‚ùå Falha no login: ${response.data?.message || 'Erro desconhecido'}`, 'red');
      log(`üìä Status: ${response.status}`, 'red');
      if (response.data?.details) {
        log(`üîç Detalhes: ${JSON.stringify(response.data.details)}`, 'gray');
      }
      return { success: false };
    }
  } catch (error) {
    log(`‚ùå Erro ao fazer login: ${error.message}`, 'red');
    return { success: false };
  }
}

// Fun√ß√£o para testar uma rota
async function testRoute(route, authToken) {
  const results = [];
  
  for (const method of route.methods) {
    const startTime = Date.now();
    
    try {
      const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      };
      
      // Usar m√∫ltiplos m√©todos de autentica√ß√£o baseado na an√°lise do auth-utils
      if (authToken && route.hasAuth) {
        // M√©todo principal: Bearer Token no Authorization header
        headers['Authorization'] = `Bearer ${authToken}`;
        
        // M√©todo alternativo: X-Auth-Token header
        headers['X-Auth-Token'] = authToken;
        
        // Cookies para fallback (baseado no login route)
        headers['Cookie'] = `auth_token=${authToken}; token=${authToken}; authToken=${authToken}`;
      }
      
      let testPath = route.path;
      if (testPath.includes(':')) {
        testPath = testPath
          .replace(/:id/g, '1')
          .replace(/:userId/g, '1')
          .replace(/:roleId/g, '1')
          .replace(/:videoId/g, '1')
          .replace(/:bookId/g, '1')
          .replace(/:courseId/g, '1')
          .replace(/:classId/g, '1')
          .replace(/:assignmentId/g, '1')
          .replace(/:\w+/g, 'test');
      }
      
      testPath = testPath.replace('/*', '/test');
      
      const url = `${CONFIG.baseUrl}/api${testPath}`;
      
      const requestOptions = {
        method,
        headers
      };
      
      // Adicionar body para m√©todos que precisam
      if (['POST', 'PUT', 'PATCH'].includes(method)) {
        requestOptions.body = getTestBodyForRoute(route.path, method);
      }
      
      const response = await makeRequest(url, requestOptions);
      const responseTime = Date.now() - startTime;
      
      // Determinar se foi sucesso baseado no status e contexto
      const isSuccess = determineSuccess(response.status, method, route.hasAuth, !!authToken);
      
      results.push({
        method,
        status: response.status,
        statusText: getStatusMessage(response.status),
        success: isSuccess,
        message: response.data?.message || response.data?.error || getStatusMessage(response.status),
        hasData: !!response.data,
        responseTime,
        authUsed: route.hasAuth && !!authToken,
        url: url,
        dataSize: response.raw ? response.raw.length : 0
      });
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      results.push({
        method,
        status: 0,
        statusText: 'Connection Error',
        success: false,
        message: error.message,
        hasData: false,
        responseTime,
        authUsed: route.hasAuth && !!authToken,
        url: `${CONFIG.baseUrl}/api${route.path}`,
        error: error.message,
        dataSize: 0
      });
    }
    
    if (CONFIG.delay > 0) {
      await new Promise(resolve => setTimeout(resolve, CONFIG.delay));
    }
  }
  
  return results;
}

// Fun√ß√£o para determinar se a resposta foi bem-sucedida
function determineSuccess(status, method, requiresAuth, hasAuth) {
  // Se requer autentica√ß√£o mas n√£o tem, 401 √© esperado mas n√£o √© sucesso
  if (requiresAuth && !hasAuth && status === 401) {
    return false; // Falha esperada por falta de auth
  }
  
  // Se tem autentica√ß√£o mas ainda retorna 401, pode ser token inv√°lido
  if (requiresAuth && hasAuth && status === 401) {
    return false; // Falha de autentica√ß√£o mesmo com token
  }
  
  // 404 pode ser esperado para rotas din√¢micas com IDs de teste
  if (status === 404) {
    return false; // N√£o encontrado - pode ser esperado para alguns testes
  }
  
  // 405 Method Not Allowed √© falha real
  if (status === 405) {
    return false;
  }
  
  // Status de sucesso por m√©todo HTTP
  const successStatuses = {
    'GET': [200, 304], // OK, Not Modified
    'POST': [200, 201], // OK, Created
    'PUT': [200, 204], // OK, No Content
    'PATCH': [200, 204], // OK, No Content
    'DELETE': [200, 204], // OK, No Content
    'OPTIONS': [200, 204], // OK, No Content
    'HEAD': [200, 204] // OK, No Content
  };
  
  const validStatuses = successStatuses[method] || [200];
  return validStatuses.includes(status) || (status >= 200 && status < 300);
}

// Fun√ß√£o para gerar body de teste baseado na rota
function getTestBodyForRoute(routePath, method) {
  const basePath = routePath.split('/')[1] || '';
  
  // Bodies espec√≠ficos por tipo de rota
  const testBodies = {
    'auth': {
      email: CONFIG.credentials.email,
      password: CONFIG.credentials.password
    },
    'users': {
      name: 'Test User',
      email: 'test@example.com',
      role: 'STUDENT'
    },
    'courses': {
      title: 'Test Course',
      description: 'Test Description'
    },
    'assignments': {
      title: 'Test Assignment',
      description: 'Test Description',
      dueDate: new Date().toISOString()
    },
    'books': {
      title: 'Test Book',
      author: 'Test Author'
    },
    'activity': {
      type: 'VIEW',
      resourceId: '1',
      duration: 100
    }
  };
  
  return testBodies[basePath] || { test: true, timestamp: Date.now() };
}

function getStatusMessage(status) {
  const statusMessages = {
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    204: 'No Content',
    304: 'Not Modified',
    400: 'Bad Request',
    401: 'Unauthorized',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    409: 'Conflict',
    422: 'Unprocessable Entity',
    429: 'Too Many Requests',
    500: 'Internal Server Error',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout'
  };
  
  return statusMessages[status] || `Status ${status}`;
}

// Fun√ß√£o para testar diferentes m√©todos de autentica√ß√£o em uma rota espec√≠fica
async function testAuthMethods(route, authData) {
  if (!route.hasAuth || !authData.token) {
    return [];
  }
  
  const authMethods = [
    {
      name: 'Bearer Token',
      headers: { 'Authorization': `Bearer ${authData.token}` }
    },
    {
      name: 'X-Auth-Token',
      headers: { 'X-Auth-Token': authData.token }
    },
    {
      name: 'Cookie auth_token',
      headers: { 'Cookie': `auth_token=${authData.token}` }
    },
    {
      name: 'Cookie token',
      headers: { 'Cookie': `token=${authData.token}` }
    }
  ];
  
  const results = [];
  
  for (const authMethod of authMethods) {
    try {
      const testPath = route.path.replace(/:\w+/g, '1').replace('/*', '/test');
      const url = `${CONFIG.baseUrl}/api${testPath}`;
      
      const response = await makeRequest(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          ...authMethod.headers
        }
      });
      
      results.push({
        method: authMethod.name,
        status: response.status,
        success: response.status >= 200 && response.status < 300,
        message: response.data?.message || getStatusMessage(response.status)
      });
      
    } catch (error) {
      results.push({
        method: authMethod.name,
        status: 0,
        success: false,
        message: error.message
      });
    }
    
    // Pequeno delay entre testes
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  return results;
}

// Fun√ß√£o principal
async function main() {
  log('üöÄ Iniciando mapeamento completo de rotas de API...', 'bright');
  log(`üìç Base URL: ${CONFIG.baseUrl}`, 'blue');
  log(`üë§ Usu√°rio: ${CONFIG.credentials.email}`, 'blue');
  log(`‚è±Ô∏è  Timeout: ${CONFIG.timeout}ms`, 'gray');
  log(`‚è≥ Delay entre requisi√ß√µes: ${CONFIG.delay}ms`, 'gray');
  
  // Descobrir todas as rotas
  log('\nüìÇ Descobrindo rotas...', 'cyan');
  const apiDir = path.join(process.cwd(), 'src', 'app', 'api');
  
  if (!fs.existsSync(apiDir)) {
    log('‚ùå Diret√≥rio de API n√£o encontrado!', 'red');
    log(`üìÅ Procurando em: ${apiDir}`, 'gray');
    process.exit(1);
  }
  
  const routes = discoverRoutes(apiDir);
  log(`‚úÖ Encontradas ${routes.length} rotas`, 'green');
  
  if (routes.length > 0) {
    log('\nüìã Primeiras rotas encontradas:', 'gray');
    routes.slice(0, 10).forEach(route => {
      log(`  ${route.path} [${route.methods.join(', ')}]${route.hasAuth ? ' üîí' : ''}`, 'gray');
    });
    if (routes.length > 10) {
      log(`  ... e mais ${routes.length - 10} rotas`, 'gray');
    }
  }
  
  // Fazer autentica√ß√£o
  const auth = await authenticate();
  
  // Criar relat√≥rio
  const report = {
    timestamp: new Date().toISOString(),
    baseUrl: CONFIG.baseUrl,
    totalRoutes: routes.length,
    authSuccess: auth.success,
    routes: [],
    summary: {
      total: 0,
      success: 0,
      failed: 0,
      authRequired: 0,
      byStatus: {}
    }
  };
  
  // Testar cada rota
  log('\nüß™ Testando rotas...', 'cyan');
  log('‚ïê'.repeat(80), 'blue');
  
  for (let i = 0; i < routes.length; i++) {
    const route = routes[i];
    const progress = `[${String(i + 1).padStart(3)}/${routes.length}]`;
    
    log(`${progress} ${route.path}`, 'yellow');
    
    const testResults = await testRoute(route, auth.token);
    
    const routeReport = {
      ...route,
      tests: testResults
    };
    
    report.routes.push(routeReport);
    
    // Atualizar estat√≠sticas
    for (const test of testResults) {
      report.summary.total++;
      if (test.success) {
        report.summary.success++;
      } else {
        report.summary.failed++;
      }
      
      report.summary.byStatus[test.status] = (report.summary.byStatus[test.status] || 0) + 1;
    }
    
    if (route.hasAuth) {
      report.summary.authRequired++;
    }
    
    // Mostrar resultado detalhado com status codes
    const successCount = testResults.filter(t => t.success).length;
    const totalTests = testResults.length;
    const status = successCount === totalTests ? '‚úÖ' : successCount > 0 ? '‚ö†Ô∏è' : '‚ùå';
    const avgTime = Math.round(testResults.reduce((sum, t) => sum + t.responseTime, 0) / totalTests);
    
    log(`      ${status} ${successCount}/${totalTests} OK (${avgTime}ms avg)`,
        successCount === totalTests ? 'green' : successCount > 0 ? 'yellow' : 'red');
    
    // Mostrar detalhes de cada m√©todo testado
    testResults.forEach(test => {
      const statusColor = test.status >= 200 && test.status < 300 ? 'green' :
                         test.status >= 300 && test.status < 400 ? 'yellow' : 'red';
      const authIcon = test.authUsed ? 'üîí' : 'üîì';
      const statusDisplay = test.status === 0 ? 'ERR' : test.status;
      
      log(`        ${test.method.padEnd(6)} ${authIcon} ${statusDisplay} ${test.statusText} (${test.responseTime}ms)`, statusColor);
    });
  }
  
  // Salvar relat√≥rio
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
  const reportDir = path.join(process.cwd(), 'reports');
  
  if (!fs.existsSync(reportDir)) {
    fs.mkdirSync(reportDir, { recursive: true });
  }
  
  const jsonReportPath = path.join(reportDir, `api-test-report-${timestamp}.json`);
  fs.writeFileSync(jsonReportPath, JSON.stringify(report, null, 2));
  
  // Mostrar resumo final
  log('\nüìä RESUMO FINAL', 'bright');
  log('‚ïê'.repeat(80), 'blue');
  log(`üìç Base URL: ${CONFIG.baseUrl}`, 'blue');
  log(`üîê Autentica√ß√£o: ${auth.success ? '‚úÖ Sucesso' : '‚ùå Falhou'}`, auth.success ? 'green' : 'red');
  log(`üìÇ Total de rotas: ${report.totalRoutes}`, 'cyan');
  log(`üß™ Total de testes: ${report.summary.total}`, 'cyan');
  log(`‚úÖ Sucessos: ${report.summary.success}`, 'green');
  log(`‚ùå Falhas: ${report.summary.failed}`, 'red');
  log(`üîí Requer autentica√ß√£o: ${report.summary.authRequired}`, 'magenta');
  
  const successRate = report.summary.total > 0 
    ? ((report.summary.success / report.summary.total) * 100).toFixed(1)
    : '0';
  log(`üìà Taxa de sucesso: ${successRate}%`, successRate === '100.0' ? 'green' : 'yellow');
  
  log(`\nüìÑ Relat√≥rio JSON salvo: ${jsonReportPath}`, 'blue');
  
  // Mostrar distribui√ß√£o por status
  if (Object.keys(report.summary.byStatus).length > 0) {
    log('\nüìä Distribui√ß√£o por Status HTTP:', 'cyan');
    Object.entries(report.summary.byStatus)
      .sort(([a], [b]) => parseInt(a) - parseInt(b))
      .forEach(([status, count]) => {
        const statusNum = parseInt(status);
        const color = statusNum < 300 ? 'green' : statusNum < 400 ? 'yellow' : 'red';
        log(`  ${status}: ${count} (${getStatusMessage(statusNum)})`, color);
      });
  }
  
  // Mostrar algumas rotas com falha
  const failedRoutes = report.routes.filter(r => r.tests.some(t => !t.success));
  if (failedRoutes.length > 0) {
    log('\n‚ùå ROTAS COM FALHA (Detalhadas):', 'red');
    failedRoutes.slice(0, 15).forEach(route => {
      const failedTests = route.tests.filter(t => !t.success);
      if (failedTests.length > 0) {
        log(`  üìç ${route.path} ${route.hasAuth ? 'üîí' : 'üîì'}:`, 'yellow');
        failedTests.forEach(test => {
          const statusColor = test.status === 401 ? 'yellow' : test.status === 404 ? 'magenta' : 'red';
          const authInfo = test.authUsed ? ' [AUTH]' : '';
          log(`    ${test.method.padEnd(6)} ‚ûú ${test.status} ${test.statusText}${authInfo} (${test.responseTime}ms)`, statusColor);
          if (test.message && test.message !== test.statusText) {
            log(`      üí¨ ${test.message}`, 'gray');
          }
        });
      }
    });
    if (failedRoutes.length > 15) {
      log(`  ... e mais ${failedRoutes.length - 15} rotas com falha`, 'gray');
    }
  }
  
  // Mostrar rotas que precisam de autentica√ß√£o
  const authRoutes = report.routes.filter(r => r.hasAuth);
  if (authRoutes.length > 0) {
    log('\nüîê ROTAS QUE REQUEREM AUTENTICA√á√ÉO:', 'magenta');
    log(`üìä Total: ${authRoutes.length} rotas`, 'cyan');
    
    const authSuccessful = authRoutes.filter(r => r.tests.some(t => t.success && t.authUsed));
    const authFailed = authRoutes.filter(r => r.tests.every(t => !t.success));
    
    log(`‚úÖ Com autentica√ß√£o funcionando: ${authSuccessful.length}`, 'green');
    log(`‚ùå Com falha de autentica√ß√£o: ${authFailed.length}`, 'red');
    
    if (authFailed.length > 0 && authFailed.length <= 10) {
      log('\nüîí Rotas com falha de autentica√ß√£o:', 'yellow');
      authFailed.forEach(route => {
        const authTests = route.tests.filter(t => t.status === 401);
        if (authTests.length > 0) {
          log(`  ${route.path} - ${authTests.map(t => t.method).join(', ')}`, 'red');
        }
      });
    }
  }
  
  log('\nüéâ Mapeamento completo conclu√≠do!', 'bright');
  log(`üìã Total de ${report.totalRoutes} rotas mapeadas e testadas`, 'cyan');
}

// Executar script
if (require.main === module) {
  main().catch(error => {
    log(`üí• Erro fatal: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  });
}

module.exports = {
  discoverRoutes,
  analyzeRouteFile,
  makeRequest,
  authenticate,
  testRoute,
  determineSuccess,
  getTestBodyForRoute,
  getStatusMessage
};