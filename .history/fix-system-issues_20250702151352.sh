#!/bin/bash

# Portal Sabercon - Corre√ß√£o de Problemas do Sistema
# Este script corrige problemas comuns antes do deploy

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

# Verificar se est√° executando como root ou com sudo
if [ "$EUID" -ne 0 ]; then
    log_error "Este script deve ser executado como root ou com sudo"
    exit 1
fi

log "üîß Iniciando corre√ß√£o de problemas do sistema..."
echo ""

# 1. Verificar e corrigir problemas de configura√ß√£o de pacotes
log "üîç Verificando configura√ß√£o de pacotes..."
if ! dpkg --configure -a 2>/dev/null; then
    log_warning "‚ö†Ô∏è  Problemas de configura√ß√£o detectados"
    
    # Interromper processos que podem estar travando
    log "üõë Interrompendo processos de instala√ß√£o em andamento..."
    killall apt apt-get dpkg 2>/dev/null || true
    
    # Remover locks se existirem
    log "üîì Removendo locks de instala√ß√£o..."
    rm -f /var/lib/dpkg/lock-frontend 2>/dev/null || true
    rm -f /var/lib/apt/lists/lock 2>/dev/null || true
    rm -f /var/cache/apt/archives/lock 2>/dev/null || true
    rm -f /var/lib/dpkg/lock 2>/dev/null || true
    
    # Reconfigurar dpkg
    log "üîß Reconfigurando gerenciador de pacotes..."
    dpkg --configure -a 2>/dev/null || true
    
    log_success "Locks removidos"
else
    log_success "Configura√ß√£o de pacotes OK"
fi

# 2. Corrigir problemas espec√≠ficos do GRUB
log "üîç Verificando problemas do GRUB..."
if dpkg -l | grep -q grub-efi; then
    if dpkg -l | grep -q "^iU.*grub-efi"; then
        log_warning "‚ö†Ô∏è  Problemas com GRUB detectados"
        
        log "üîß Corrigindo GRUB..."
        
        # Tentar reconfigurar GRUB
        DEBIAN_FRONTEND=noninteractive dpkg --configure grub-efi-amd64-signed 2>/dev/null || true
        
        # Se ainda houver problemas, tentar reinstalar
        if dpkg -l | grep -q "^iU.*grub-efi"; then
            log "üîß Reinstalando GRUB..."
            apt-get remove --purge grub-efi-amd64-signed shim-signed -y 2>/dev/null || true
            apt-get install grub-efi-amd64-signed shim-signed -y 2>/dev/null || true
        fi
        
        # Atualizar GRUB
        update-grub 2>/dev/null || true
        
        log_success "GRUB corrigido"
    else
        log_success "GRUB OK"
    fi
else
    log_success "GRUB n√£o instalado (normal em VPS)"
fi

# 3. Corrigir depend√™ncias quebradas
log "üîç Verificando depend√™ncias quebradas..."
if ! apt-get check 2>/dev/null; then
    log_warning "‚ö†Ô∏è  Depend√™ncias quebradas detectadas"
    
    log "üîß Corrigindo depend√™ncias..."
    apt-get install -f -y
    
    log_success "Depend√™ncias corrigidas"
else
    log_success "Depend√™ncias OK"
fi

# 4. Limpar cache de pacotes
log "üßπ Limpando cache de pacotes..."
apt-get clean
apt-get autoclean
apt-get autoremove -y

log_success "Cache limpo"

# 5. Atualizar lista de pacotes
log "üì¶ Atualizando lista de pacotes..."
apt update

log_success "Lista de pacotes atualizada"

# 6. Verifica√ß√£o final
log "üîç Verifica√ß√£o final do sistema..."

ISSUES_FOUND=0

# Verificar se dpkg est√° funcionando
if ! dpkg --configure -a 2>/dev/null; then
    log_warning "‚ö†Ô∏è  Ainda h√° problemas com dpkg"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
else
    log_success "dpkg funcionando"
fi

# Verificar se apt est√° funcionando
if ! apt-get check 2>/dev/null; then
    log_warning "‚ö†Ô∏è  Ainda h√° problemas com apt"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
else
    log_success "apt funcionando"
fi

# Verificar espa√ßo em disco
DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    log_warning "‚ö†Ô∏è  Pouco espa√ßo em disco: ${DISK_USAGE}%"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
else
    log_success "Espa√ßo em disco OK: ${DISK_USAGE}% usado"
fi

# Verificar mem√≥ria
MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [ "$MEMORY_USAGE" -gt 90 ]; then
    log_warning "‚ö†Ô∏è  Pouca mem√≥ria dispon√≠vel: ${MEMORY_USAGE}% usado"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
else
    log_success "Mem√≥ria OK: ${MEMORY_USAGE}% usado"
fi

echo ""
if [ "$ISSUES_FOUND" -eq 0 ]; then
    log_success "üéâ Sistema corrigido com sucesso!"
    echo ""
    echo "‚úÖ Todos os problemas foram resolvidos"
    echo "‚úÖ Sistema pronto para deploy"
    echo ""
    echo "üöÄ Execute agora:"
    echo "   sudo bash deploy-portal-production.sh"
else
    log_warning "‚ö†Ô∏è  Sistema parcialmente corrigido"
    echo ""
    echo "‚ö†Ô∏è  $ISSUES_FOUND problema(s) ainda presente(s)"
    echo "‚ö†Ô∏è  O deploy pode continuar, mas monitore os logs"
    echo ""
    echo "üöÄ Para continuar mesmo assim:"
    echo "   sudo bash deploy-portal-production.sh"
    echo ""
    echo "üìû Se houver problemas:"
    echo "   ‚Ä¢ Verifique os logs: journalctl -xe"
    echo "   ‚Ä¢ Libere espa√ßo em disco se necess√°rio"
    echo "   ‚Ä¢ Reinicie o servidor se necess√°rio"
fi

echo ""
log_success "Corre√ß√£o finalizada! ‚ú®" 