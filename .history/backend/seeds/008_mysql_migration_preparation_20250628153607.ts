import type { Knex } from 'knex';

export async function seed(knex: Knex): Promise<void> {
  console.log('üå± Preparando banco para migra√ß√£o MySQL...');

  // 1. Garantir que a role TEACHER existe
  const teacherRole = await knex('roles')
    .where('name', 'TEACHER')
    .first();

  if (!teacherRole) {
    console.log('üë®‚Äçüè´ Criando role TEACHER...');
    await knex('roles').insert({
      name: 'TEACHER',
      description: 'Professor - Role padr√£o para usu√°rios migrados do MySQL',
      type: 'system',
      status: 'active',
      user_count: 0
    });
  } else {
    console.log('‚úÖ Role TEACHER j√° existe');
  }

  // 2. Garantir que existe uma institui√ß√£o padr√£o para migra√ß√£o
  const defaultInstitution = await knex('institutions')
    .where('code', 'MYSQL_MIGRATED')
    .first();

  if (!defaultInstitution) {
    console.log('üè¢ Criando institui√ß√£o padr√£o para migra√ß√£o...');
    await knex('institutions').insert({
      name: 'Institui√ß√£o Migrada do MySQL',
      code: 'MYSQL_MIGRATED',
      description: 'Institui√ß√£o padr√£o para dados migrados do sistema legado MySQL',
      address: 'Endere√ßo n√£o informado',
      city: 'Cidade n√£o informada',
      state: 'Estado n√£o informado',
      zip_code: '00000-000',
      phone: '(00) 0000-0000',
      email: 'contato@migrado.com.br',
      status: 'active'
    });
  } else {
    console.log('‚úÖ Institui√ß√£o padr√£o j√° existe');
  }

  // 3. Garantir que existe uma escola padr√£o para migra√ß√£o
  const institution = await knex('institution')
    .where('code', 'MYSQL_MIGRATED')
    .first();

  if (institution) {
    const defaultSchool = await knex('schools')
      .where('code', 'MYSQL_MIGRATED_SCHOOL')
      .first();

    if (!defaultSchool) {
      console.log('üè´ Criando escola padr√£o para migra√ß√£o...');
      await knex('schools').insert({
        name: 'Escola Migrada do MySQL',
        code: 'MYSQL_MIGRATED_SCHOOL',
        description: 'Escola padr√£o para dados migrados do sistema legado MySQL',
        address: 'Endere√ßo n√£o informado',
        city: 'Cidade n√£o informada',
        state: 'Estado n√£o informado',
        zip_code: '00000-000',
        phone: '(00) 0000-0000',
        email: 'escola@migrado.com.br',
        institution_id: institution.id,
        status: 'active'
      });
    } else {
      console.log('‚úÖ Escola padr√£o j√° existe');
    }
  }

  // 4. Garantir permiss√µes b√°sicas para TEACHER
  const teacherRoleUpdated = await knex('roles')
    .where('name', 'TEACHER')
    .first();

  if (teacherRoleUpdated) {
    // Verificar se j√° existem permiss√µes para TEACHER
    const existingPermissions = await knex('role_permissions')
      .where('role_id', teacherRoleUpdated.id)
      .count('* as count')
      .first();

    if (existingPermissions && parseInt(existingPermissions.count as string) === 0) {
      console.log('üîê Adicionando permiss√µes b√°sicas para TEACHER...');
      
      // Buscar permiss√µes b√°sicas que um professor deve ter
      const basicPermissions = await knex('permissions')
        .whereIn('name', [
          'read_courses',
          'read_students',
          'read_classes',
          'read_files',
          'create_files',
          'read_collections',
          'create_collections',
          'read_notifications'
        ]);

      if (basicPermissions.length > 0) {
        const rolePermissions = basicPermissions.map(permission => ({
          role_id: teacherRoleUpdated.id,
          permission_id: permission.id
        }));

        await knex('role_permissions').insert(rolePermissions);
        console.log(`   ‚úÖ ${basicPermissions.length} permiss√µes atribu√≠das`);
      } else {
        console.log('   ‚ö†Ô∏è Nenhuma permiss√£o b√°sica encontrada no sistema');
      }
    } else {
      console.log('‚úÖ Permiss√µes para TEACHER j√° configuradas');
    }
  }

  // 5. Criar algumas permiss√µes b√°sicas se n√£o existirem
  const basicPermissionsList = [
    { name: 'read_files', resource: 'files', action: 'read', description: 'Ler arquivos' },
    { name: 'create_files', resource: 'files', action: 'create', description: 'Criar arquivos' },
    { name: 'read_collections', resource: 'collections', action: 'read', description: 'Ler cole√ß√µes' },
    { name: 'create_collections', resource: 'collections', action: 'create', description: 'Criar cole√ß√µes' },
    { name: 'read_students', resource: 'students', action: 'read', description: 'Ler dados de estudantes' },
    { name: 'read_classes', resource: 'classes', action: 'read', description: 'Ler turmas' }
  ];

  for (const perm of basicPermissionsList) {
    const existing = await knex('permissions').where('name', perm.name).first();
    if (!existing) {
      await knex('permissions').insert(perm);
      console.log(`   ‚ûï Permiss√£o ${perm.name} criada`);
    }
  }

  console.log('‚úÖ Prepara√ß√£o para migra√ß√£o MySQL conclu√≠da!');
  console.log('üìã Pr√≥ximos passos:');
  console.log('   1. Configure as vari√°veis de ambiente MySQL');
  console.log('   2. Execute: npm run migrate:mysql:complete');
  console.log('   3. Verifique: npm run migrate:mysql:verify');
} 