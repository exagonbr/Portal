import type { Knex } from 'knex';

export async function seed(knex: Knex): Promise<void> {
  console.log('üå± Preparando banco para migra√ß√£o MySQL...');

  // 1. Garantir que a role TEACHER existe
  const teacherRole = await knex('roles')
    .where('name', 'TEACHER')
    .first();

  if (!teacherRole) {
    console.log('üë®‚Äçüè´ Criando role TEACHER...');
    await knex('roles').insert({
      name: 'TEACHER',
      description: 'Professor - Role padr√£o para usu√°rios migrados do MySQL',
      type: 'system',
      status: 'active',
      user_count: 0
    });
  }

  // 2. Garantir que existe uma institui√ß√£o padr√£o para migra√ß√£o
  const defaultInstitution = await knex('institutions')
    .where('code', 'DEFAULT_MIGRATED')
    .first();

  if (!defaultInstitution) {
    console.log('üè¢ Criando institui√ß√£o padr√£o para migra√ß√£o...');
    await knex('institution').insert({
      name: 'Institui√ß√£o Migrada do MySQL',
      code: 'DEFAULT_MIGRATED',
      description: 'Institui√ß√£o padr√£o para dados migrados do sistema legado MySQL',
      status: 'active'
    });
  }

  // 3. Garantir que existe uma escola padr√£o para migra√ß√£o
  const institution = await knex('institution')
    .where('code', 'DEFAULT_MIGRATED')
    .first();

  if (institution) {
    const defaultSchool = await knex('schools')
      .where('code', 'DEFAULT_MIGRATED_SCHOOL')
      .first();

    if (!defaultSchool) {
      console.log('üè´ Criando escola padr√£o para migra√ß√£o...');
      await knex('schools').insert({
        name: 'Escola Migrada do MySQL',
        code: 'DEFAULT_MIGRATED_SCHOOL',
        description: 'Escola padr√£o para dados migrados do sistema legado MySQL',
        institution_id: institution.id,
        status: 'active'
      });
    }
  }

  // 4. Garantir permiss√µes b√°sicas para TEACHER
  const teacherRoleUpdated = await knex('roles')
    .where('name', 'TEACHER')
    .first();

  if (teacherRoleUpdated) {
    // Verificar se j√° existem permiss√µes para TEACHER
    const existingPermissions = await knex('role_permissions')
      .where('role_id', teacherRoleUpdated.id)
      .count('* as count')
      .first();

    if (existingPermissions && existingPermissions.count === '0') {
      console.log('üîê Adicionando permiss√µes b√°sicas para TEACHER...');
      
      // Buscar permiss√µes b√°sicas que um professor deve ter
      const basicPermissions = await knex('permissions')
        .whereIn('name', [
          'read_courses',
          'read_students',
          'read_classes',
          'read_files',
          'create_files',
          'read_collections',
          'read_notifications'
        ]);

      if (basicPermissions.length > 0) {
        const rolePermissions = basicPermissions.map(permission => ({
          role_id: teacherRoleUpdated.id,
          permission_id: permission.id
        }));

        await knex('role_permissions').insert(rolePermissions);
      }
    }
  }

  console.log('‚úÖ Prepara√ß√£o para migra√ß√£o MySQL conclu√≠da!');
} 