#!/usr/bin/env node

/**
 * Script para executar seeds de atualiza√ß√£o de roles de teachers
 * 
 * Uso:
 *   node executar-seeds-teacher.js
 * 
 * Op√ß√µes:
 *   --prisma    : Executar vers√£o para Prisma
 *   --rollback  : Executar rollback dos seeds
 *   --dry-run   : Apenas mostrar o que seria executado
 */

const { exec } = require('child_process');
const path = require('path');

const args = process.argv.slice(2);
const isPrisma = args.includes('--prisma');
const isRollback = args.includes('--rollback');
const isDryRun = args.includes('--dry-run');

console.log('üöÄ Script de execu√ß√£o de seeds para atualiza√ß√£o de roles TEACHER');
console.log('=' .repeat(60));

if (isDryRun) {
  console.log('üîç MODO DRY-RUN: Apenas mostrando comandos que seriam executados\n');
}

// Definir o seed file baseado na op√ß√£o
const seedFile = isPrisma 
  ? 'backend/seeds/999_update_teacher_roles_prisma.ts'
  : 'backend/seeds/999_update_teacher_roles.ts';

console.log(`üìÅ Arquivo de seed: ${seedFile}`);
console.log(`üîß Modo: ${isPrisma ? 'Prisma' : 'Knex padr√£o'}`);
console.log(`‚ö° Opera√ß√£o: ${isRollback ? 'Rollback' : 'Executar seed'}`);

if (isDryRun) {
  console.log('\nüîç Comandos que seriam executados:');
  console.log(`   cd backend`);
  
  if (isRollback) {
    console.log(`   npx knex seed:rollback --specific=${path.basename(seedFile, '.ts')}`);
  } else {
    console.log(`   npx knex seed:run --specific=${path.basename(seedFile, '.ts')}`);
  }
  
  console.log('\nüí° Para executar de verdade, remova a flag --dry-run');
  process.exit(0);
}

// Verificar se o arquivo de seed existe
const fs = require('fs');
if (!fs.existsSync(seedFile)) {
  console.error(`‚ùå Arquivo de seed n√£o encontrado: ${seedFile}`);
  process.exit(1);
}

console.log('\n‚è≥ Executando seed...');

// Definir o comando
const command = isRollback 
  ? `cd backend && npx knex seed:rollback --specific=${path.basename(seedFile, '.ts')}`
  : `cd backend && npx knex seed:run --specific=${path.basename(seedFile, '.ts')}`;

console.log(`üîß Comando: ${command}`);

// Executar o comando
exec(command, (error, stdout, stderr) => {
  if (error) {
    console.error(`‚ùå Erro na execu√ß√£o: ${error.message}`);
    process.exit(1);
  }
  
  if (stderr) {
    console.error(`‚ö†Ô∏è Stderr: ${stderr}`);
  }
  
  console.log('\nüìã Sa√≠da:');
  console.log(stdout);
  
  console.log('\n‚úÖ Seed executado com sucesso!');
  
  // Sugest√µes p√≥s-execu√ß√£o
  console.log('\nüí° Pr√≥ximos passos sugeridos:');
  console.log('   1. Verificar os logs acima para confirmar que tudo ocorreu conforme esperado');
  console.log('   2. Testar o sistema para verificar se os usu√°rios teachers t√™m as permiss√µes corretas');
  console.log('   3. Se necess√°rio, execute o rollback com: node executar-seeds-teacher.js --rollback');
  
  if (isPrisma) {
    console.log('   4. Considere regenerar o cliente Prisma: npx prisma generate');
  }
});

// Mostrar ajuda se necess√°rio
if (args.includes('--help') || args.includes('-h')) {
  console.log('\nüìö Ajuda:');
  console.log('  node executar-seeds-teacher.js [op√ß√µes]');
  console.log('');
  console.log('  Op√ß√µes:');
  console.log('    --prisma      Usar vers√£o do seed compat√≠vel com Prisma');
  console.log('    --rollback    Executar rollback (reverter altera√ß√µes)');
  console.log('    --dry-run     Apenas mostrar comandos sem executar');
  console.log('    --help, -h    Mostrar esta ajuda');
  console.log('');
  console.log('  Exemplos:');
  console.log('    node executar-seeds-teacher.js                    # Executar seed padr√£o');
  console.log('    node executar-seeds-teacher.js --prisma           # Executar vers√£o Prisma');
  console.log('    node executar-seeds-teacher.js --rollback         # Reverter altera√ß√µes');
  console.log('    node executar-seeds-teacher.js --dry-run          # Visualizar comandos');
  process.exit(0);
} 