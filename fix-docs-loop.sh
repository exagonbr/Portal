#!/bin/bash

# Script para corrigir loop de redirecionamentos na rota /api/docs
# Portal Sabercon - Resolver loop 301 em /api/docs
# Execute: bash fix-docs-loop.sh

echo "üîß CORRIGINDO LOOP DE /api/docs"
echo "==============================="

# 1. Desabilitar temporariamente a rota /docs no backend
echo "üîß Desabilitando rota /docs no backend..."

# Backup do arquivo de rotas
cp backend/src/routes/index.ts backend/src/routes/index.ts.backup.$(date +%Y%m%d-%H%M%S)

# Comentar as rotas do Swagger temporariamente
sed -i 's|router.use(\x27/docs\x27, swaggerUi.serve);|// router.use(\x27/docs\x27, swaggerUi.serve); // DESABILITADO TEMPORARIAMENTE|' backend/src/routes/index.ts
sed -i 's|router.get(\x27/docs\x27, swaggerUi.setup|// router.get(\x27/docs\x27, swaggerUi.setup|' backend/src/routes/index.ts

echo "‚úÖ Rota /docs desabilitada no backend"

# 2. Adicionar rota de health check espec√≠fica para docs
echo "üîß Adicionando rota de health check para docs..."

# Adicionar uma rota simples para /docs que n√£o cause loop
cat >> backend/src/routes/index.ts << 'EOF'

// Rota tempor√°ria para /docs (evitar loop)
router.get('/docs', (req, res) => {
  res.json({ 
    message: 'API Documentation temporariamente desabilitada para evitar loops',
    status: 'disabled',
    alternative: '/api/docs.json para especifica√ß√£o OpenAPI',
    timestamp: new Date().toISOString()
  });
});
EOF

echo "‚úÖ Rota de health check adicionada"

# 3. Verificar se h√° configura√ß√µes problem√°ticas no Nginx
echo "üîç Verificando configura√ß√µes do Nginx..."

# Verificar se existe configura√ß√£o espec√≠fica para /docs
if grep -q "/docs" /etc/nginx/sites-available/default 2>/dev/null; then
    echo "‚ö†Ô∏è  Encontrada configura√ß√£o /docs no Nginx"
    
    # Backup da configura√ß√£o do Nginx
    sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup.$(date +%Y%m%d-%H%M%S)
    
    # Comentar configura√ß√µes espec√≠ficas para /docs se existirem
    sudo sed -i 's|location /docs|# location /docs|g' /etc/nginx/sites-available/default
    sudo sed -i 's|location /api/docs|# location /api/docs|g' /etc/nginx/sites-available/default
    
    echo "‚úÖ Configura√ß√µes /docs comentadas no Nginx"
else
    echo "‚úÖ Nenhuma configura√ß√£o espec√≠fica /docs encontrada no Nginx"
fi

# 4. Rebuild do backend
echo "üì¶ Fazendo rebuild do backend..."

cd backend
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ Backend rebuild conclu√≠do"
else
    echo "‚ùå Erro no rebuild do backend"
    
    # Restaurar backup se falhou
    cp src/routes/index.ts.backup.* src/routes/index.ts
    echo "üìù Backup restaurado"
    exit 1
fi

cd ..

# 5. Restart dos servi√ßos
echo "üîÑ Reiniciando servi√ßos..."

# Restart do Nginx se foi modificado
if grep -q "# location /docs" /etc/nginx/sites-available/default 2>/dev/null; then
    echo "üîÑ Reiniciando Nginx..."
    sudo nginx -t && sudo systemctl restart nginx
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Nginx reiniciado com sucesso"
    else
        echo "‚ùå Erro ao reiniciar Nginx"
        # Restaurar backup do Nginx
        sudo cp /etc/nginx/sites-available/default.backup.* /etc/nginx/sites-available/default
        sudo systemctl restart nginx
        echo "üìù Backup do Nginx restaurado"
    fi
fi

# Restart do PM2
echo "üîÑ Reiniciando PM2..."
pm2 restart PortalServerBackend

if [ $? -eq 0 ]; then
    echo "‚úÖ Backend reiniciado via PM2"
else
    echo "‚ùå Erro ao reiniciar via PM2"
fi

# 6. Testar se o loop foi resolvido
echo "üß™ Testando se o loop foi resolvido..."

sleep 3

# Testar a rota /api/docs
echo "üì° Testando /api/docs..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://portal.sabercon.com.br/api/docs 2>/dev/null || echo "000")

if [ "$RESPONSE" = "200" ]; then
    echo "‚úÖ /api/docs respondendo com 200 (sem loop)"
elif [ "$RESPONSE" = "301" ] || [ "$RESPONSE" = "302" ]; then
    echo "‚ö†Ô∏è  /api/docs ainda retornando redirecionamento ($RESPONSE)"
    echo "üí° Pode ser necess√°rio investiga√ß√£o adicional"
else
    echo "‚ÑπÔ∏è  /api/docs respondendo com c√≥digo: $RESPONSE"
fi

# Testar health check
echo "üì° Testando health check..."
HEALTH_RESPONSE=$(curl -s https://portal.sabercon.com.br/api/health 2>/dev/null | grep -o '"status":"OK"' || echo "")

if [ ! -z "$HEALTH_RESPONSE" ]; then
    echo "‚úÖ Health check funcionando"
else
    echo "‚ö†Ô∏è  Health check pode n√£o estar funcionando"
fi

echo ""
echo "‚úÖ CORRE√á√ÉO DE LOOP /api/docs CONCLU√çDA!"
echo "======================================="
echo ""
echo "üîß Corre√ß√µes aplicadas:"
echo "   ‚Ä¢ Rota /docs desabilitada temporariamente no backend"
echo "   ‚Ä¢ Rota de health check adicionada para /docs"
echo "   ‚Ä¢ Configura√ß√µes Nginx verificadas e ajustadas"
echo "   ‚Ä¢ Backend rebuild e restart conclu√≠do"
echo ""
echo "üß™ Verifica√ß√µes:"
echo "   ‚Ä¢ /api/docs: HTTP $RESPONSE"
echo "   ‚Ä¢ /api/health: Funcionando"
echo ""
echo "üìä Monitorar logs:"
echo "   pm2 logs PortalServerBackend --lines 20"
echo ""
echo "üìù Para reativar documenta√ß√£o Swagger:"
echo "   1. Edite backend/src/routes/index.ts"
echo "   2. Descomente as linhas do swaggerUi"
echo "   3. Remova a rota tempor√°ria /docs"
echo "   4. Rebuild e restart"
echo ""
echo "‚ö†Ô∏è  DOCUMENTA√á√ÉO SWAGGER TEMPORARIAMENTE DESABILITADA"
echo "   Use /api/docs.json para acessar especifica√ß√£o OpenAPI"
echo "" 