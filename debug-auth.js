const { AppDataSource } = require('./backend/dist/config/typeorm.config');
const { User } = require('./backend/dist/entities/User');
const { Role } = require('./backend/dist/entities/Role');

async function debugAuth() {
  try {
    console.log('üîç Iniciando debug de autentica√ß√£o...');
    
    // Inicializar conex√£o com banco
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Conex√£o com banco estabelecida');
    }
    
    // Verificar se o usu√°rio admin existe
    const userRepository = AppDataSource.getRepository(User);
    const adminUser = await userRepository.findOne({
      where: { email: 'admin@portal.com' },
      relations: ['role', 'institution']
    });
    
    if (!adminUser) {
      console.log('‚ùå Usu√°rio admin n√£o encontrado no banco');
      return;
    }
    
    console.log('‚úÖ Usu√°rio admin encontrado:', {
      id: adminUser.id,
      email: adminUser.email,
      name: adminUser.name,
      is_active: adminUser.is_active,
      role: adminUser.role ? adminUser.role.name : 'sem role'
    });
    
    // Testar compara√ß√£o de senha
    const isValidPassword = await adminUser.comparePassword('admin123');
    console.log('üîê Teste de senha:', isValidPassword ? '‚úÖ V√°lida' : '‚ùå Inv√°lida');
    
    if (!isValidPassword) {
      console.log('üîç Hash da senha no banco:', adminUser.password);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  } finally {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
    }
  }
}

debugAuth(); 