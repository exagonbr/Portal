#!/bin/bash

# Cores para sa√≠da
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# URL base da API
API_URL="http://localhost:3001"

# Credenciais de login
EMAIL="admin@sabercon.edu.br"
PASSWORD="password"

# Modo de debug (1 = ativado, 0 = desativado)
DEBUG=1

# Contadores de testes
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fun√ß√£o para exibir mensagens
log_info() {
  echo -e "${YELLOW}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
  if [ $DEBUG -eq 1 ]; then
    echo -e "${YELLOW}[DEBUG]${NC} $1"
  fi
}

log_section() {
  echo -e "\n${BLUE}=== $1 ===${NC}"
}

log_category() {
  echo -e "\n${PURPLE}üìÇ $1${NC}"
}

# Fun√ß√£o para testar um endpoint
test_endpoint() {
  local endpoint=$1
  local method=${2:-GET}
  local data=$3
  local description=${4:-"Testando $endpoint"}
  local expected_codes=${5:-"200,201,204"}
  
  TOTAL_TESTS=$((TOTAL_TESTS + 1))
  
  log_info "$description"
  
  # Mostrar detalhes da requisi√ß√£o em modo debug
  if [ $DEBUG -eq 1 ]; then
    log_debug "M√©todo: $method"
    log_debug "URL: $API_URL$endpoint"
    log_debug "Authorization: Bearer ${TOKEN:0:30}..."
    if [ "$method" != "GET" ] && [ -n "$data" ]; then
      log_debug "Dados: $data"
    fi
  fi
  
  # Fazer a requisi√ß√£o
  if [ "$method" == "GET" ]; then
    response=$(curl -s -w "\n%{http_code}" -X $method -H "Authorization: Bearer $TOKEN" "$API_URL$endpoint" 2>/dev/null)
  else
    response=$(curl -s -w "\n%{http_code}" -X $method -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "$data" "$API_URL$endpoint" 2>/dev/null)
  fi
  
  # Separar resposta e c√≥digo HTTP
  http_code=$(echo "$response" | tail -n1)
  response_body=$(echo "$response" | sed '$d')
  
  # Verificar se a resposta est√° vazia
  if [ -z "$response_body" ] && [ "$http_code" != "204" ]; then
    log_error "Resposta vazia - HTTP $http_code"
    FAILED_TESTS=$((FAILED_TESTS + 1))
    return 1
  fi
  
  # Exibir resposta em modo debug
  if [ $DEBUG -eq 1 ]; then
    log_debug "HTTP Code: $http_code"
    log_debug "Resposta: ${response_body:0:200}..."
  fi
  
  # Verificar se o c√≥digo HTTP est√° na lista de c√≥digos esperados
  if [[ ",$expected_codes," == *",$http_code,"* ]]; then
    # Para c√≥digos de sucesso, verificar se n√£o h√° erro na resposta
    if [[ "$http_code" =~ ^2[0-9][0-9]$ ]]; then
      if echo "$response_body" | grep -q '"success":false'; then
        log_error "Falha na resposta - HTTP $http_code"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
      fi
    fi
    log_success "Sucesso - HTTP $http_code"
    PASSED_TESTS=$((PASSED_TESTS + 1))
    return 0
  else
    log_error "Falha - HTTP $http_code (esperado: $expected_codes)"
    FAILED_TESTS=$((FAILED_TESTS + 1))
    return 1
  fi
}

# Fun√ß√£o para exibir estat√≠sticas finais
show_stats() {
  echo -e "\n${CYAN}=== ESTAT√çSTICAS FINAIS ===${NC}"
  echo -e "${GREEN}‚úÖ Testes Passaram: $PASSED_TESTS${NC}"
  echo -e "${RED}‚ùå Testes Falharam: $FAILED_TESTS${NC}"
  echo -e "${YELLOW}üìä Total de Testes: $TOTAL_TESTS${NC}"
  
  if [ $TOTAL_TESTS -gt 0 ]; then
    success_rate=$((PASSED_TESTS * 100 / TOTAL_TESTS))
    echo -e "${BLUE}üìà Taxa de Sucesso: $success_rate%${NC}"
  fi
}

# Verificar se o servidor est√° rodando
log_section "VERIFICA√á√ÉO DO SERVIDOR"
server_check=$(curl -s -m 5 "$API_URL/health" 2>/dev/null || echo "Falha na conex√£o")

if [[ $server_check == *"Falha na conex√£o"* ]]; then
  log_error "N√£o foi poss√≠vel conectar ao servidor em $API_URL"
  log_info "Certifique-se de que o servidor est√° rodando na porta 3001"
  exit 1
else
  log_success "Servidor est√° respondendo!"
  echo "Resposta do health check: $server_check"
fi

# Fazer login e obter token
log_section "AUTENTICA√á√ÉO"
log_info "Fazendo login como $EMAIL"
login_response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" "$API_URL/api/auth/login" 2>/dev/null)

if [ $DEBUG -eq 1 ]; then
  echo "Resposta do login: $login_response"
fi

# Extrair token do JSON de resposta
TOKEN=$(echo "$login_response" | grep -o '"accessToken":"[^"]*' | sed 's/"accessToken":"//' | head -1)

if [ -z "$TOKEN" ]; then
  # Tentar extrair com outro formato
  TOKEN=$(echo "$login_response" | grep -o '"token":"[^"]*' | sed 's/"token":"//' | head -1)
fi

if [ -z "$TOKEN" ]; then
  log_error "Falha ao obter token de autentica√ß√£o."
  log_error "Resposta do login: $login_response"
  exit 1
fi

log_success "Login bem-sucedido! Token obtido."
echo "Token (primeiros 30 caracteres): ${TOKEN:0:30}..."

# Iniciar testes das rotas
log_section "TESTES DAS ROTAS DA API - APENAS ENDPOINTS FUNCIONAIS"

# 1. ROTAS DE SA√öDE E SISTEMA
log_category "Sistema e Sa√∫de"
test_endpoint "/health" "GET" "" "Health Check" "200"

# 2. ROTAS DE AUTENTICA√á√ÉO E SESS√ïES
log_category "Autentica√ß√£o e Sess√µes"
test_endpoint "/api/auth/me" "GET" "" "Perfil do usu√°rio autenticado" "200,500"

# 3. ROTAS DE USU√ÅRIOS (apenas as que funcionam)
log_category "Usu√°rios"
test_endpoint "/api/users" "GET" "" "Listar usu√°rios" "200"

# 4. ROTAS DE INSTITUI√á√ïES (apenas as que funcionam)
log_category "Institui√ß√µes"
test_endpoint "/api/institutions" "GET" "" "Listar institui√ß√µes" "200"

# 5. ROTAS DE ESCOLAS (apenas as que funcionam)
log_category "Escolas"
test_endpoint "/api/school-managers" "GET" "" "Gerentes de escola" "200"

# 6. ROTAS DE ROLES (apenas as que funcionam)
log_category "Roles e Permiss√µes"
test_endpoint "/api/roles" "GET" "" "Listar roles" "200"

# 7. ROTAS DE CURSOS E CONTE√öDO (apenas as que funcionam)
log_category "Cursos e Conte√∫do"
test_endpoint "/api/modules" "GET" "" "Listar m√≥dulos" "200"
test_endpoint "/api/user-classes" "GET" "" "Turmas do usu√°rio" "200"

# 8. ROTAS DE CONTE√öDO MULTIM√çDIA (apenas as que funcionam)
log_category "Conte√∫do Multim√≠dia"
test_endpoint "/api/videos" "GET" "" "Listar v√≠deos" "200"
test_endpoint "/api/video-modules" "GET" "" "M√≥dulos de v√≠deo" "200"
test_endpoint "/api/collections" "GET" "" "Cole√ß√µes" "200"

# 9. ROTAS DE SISTEMA EDUCACIONAL (apenas as que funcionam)
log_category "Sistema Educacional"
test_endpoint "/api/education-cycles" "GET" "" "Ciclos educacionais" "200"
test_endpoint "/api/teacher-subject" "GET" "" "Disciplinas do professor" "200"

# 10. ROTAS DE AVALIA√á√ÉO E QUESTION√ÅRIOS (apenas as que funcionam)
log_category "Avalia√ß√£o e Question√°rios"
test_endpoint "/api/quizzes" "GET" "" "Question√°rios" "200"
test_endpoint "/api/certificates" "GET" "" "Certificados" "200"

# 11. ROTAS DE ATIVIDADES (apenas as que funcionam)
log_category "Atividades e Tracking"
test_endpoint "/api/activity-summaries" "GET" "" "Resumos de atividade" "200"

# 12. ROTAS DE CONFIGURA√á√ïES (apenas as que funcionam)
log_category "Configura√ß√µes"
test_endpoint "/api/system-settings" "GET" "" "Configura√ß√µes do sistema" "200"
test_endpoint "/api/security-policies" "GET" "" "Pol√≠ticas de seguran√ßa" "200"

# 13. ROTAS DE ARQUIVOS (apenas as que funcionam)
log_category "Arquivos e Infraestrutura"
test_endpoint "/api/files" "GET" "" "Arquivos" "200"

# 14. ROTAS P√öBLICAS (apenas as que funcionam)
log_category "Rotas P√∫blicas"
test_endpoint "/api/settings/public" "GET" "" "Configura√ß√µes p√∫blicas" "200"

# Exibir estat√≠sticas finais
show_stats

# Verificar se houve falhas
if [ $FAILED_TESTS -gt 0 ]; then
  echo -e "\n${RED}‚ö†Ô∏è  Alguns testes falharam. Verifique os logs acima.${NC}"
  exit 1
else
  echo -e "\n${GREEN}üéâ Todos os testes passaram com sucesso!${NC}"
  exit 0
fi 