/**
 * Script de Corre√ß√£o R√°pida para Tokens de Autentica√ß√£o
 * 
 * Este script resolve o problema de tokens JWT inv√°lidos
 * convertendo tokens Base64 para formato JWT v√°lido.
 */

console.log('üîß INICIANDO CORRE√á√ÉO DE TOKEN DE AUTENTICA√á√ÉO...');

// Verificar se estamos no navegador
if (typeof window === 'undefined') {
  console.error('‚ùå Este script deve ser executado no console do navegador');
  process.exit(1);
}

// Fun√ß√£o principal de corre√ß√£o
function fixAuthToken() {
  console.group('üîß CORRE√á√ÉO DE TOKEN DE AUTENTICA√á√ÉO');
  
  const possibleKeys = ['auth_token', 'authToken', 'token'];
  let tokenFixed = false;
  let tokenFound = false;
  
  // Verificar cada poss√≠vel chave de token
  for (const key of possibleKeys) {
    const token = localStorage.getItem(key);
    
    if (token && token.trim() !== '') {
      tokenFound = true;
      console.log(`üîç Token encontrado em localStorage.${key}`);
      console.log(`üìè Tamanho: ${token.length} caracteres`);
      console.log(`üëÄ Preview: ${token.substring(0, 30)}...`);
      
      // Verificar formato
      const parts = token.split('.');
      
      if (parts.length === 3) {
        console.log('‚úÖ Token j√° est√° no formato JWT v√°lido');
        
        // Verificar se n√£o est√° expirado
        try {
          const payload = JSON.parse(atob(parts[1]));
          const now = Math.floor(Date.now() / 1000);
          
          if (payload.exp && payload.exp < now) {
            console.warn('‚è∞ Token est√° expirado');
            console.log('üìÖ Expirou em:', new Date(payload.exp * 1000));
            console.log('üîÑ Remova o token e fa√ßa login novamente');
          } else {
            console.log('‚úÖ Token v√°lido e n√£o expirado');
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao verificar expira√ß√£o:', error.message);
        }
        
      } else if (parts.length === 1 && token.length > 50) {
        console.log('üîÑ Token parece ser Base64, tentando converter para JWT...');
        
        try {
          // Tentar decodificar como Base64
          const decoded = atob(token);
          const tokenData = JSON.parse(decoded);
          
          console.log('üì¶ Dados do token:', tokenData);
          
          if (tokenData.userId && tokenData.email && tokenData.role) {
            // Criar novo JWT com os mesmos dados
            const newJwtPayload = {
              userId: tokenData.userId,
              email: tokenData.email,
              name: tokenData.name,
              role: tokenData.role,
              institutionId: tokenData.institutionId,
              permissions: tokenData.permissions || [],
              iat: Math.floor(Date.now() / 1000),
              exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 horas
            };
            
            // Simular JWT v√°lido (3 partes)
            const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
            const payload = btoa(JSON.stringify(newJwtPayload));
            const signature = btoa('mock_signature_' + Date.now());
            
            const newJwtToken = `${header}.${payload}.${signature}`;
            
            // Armazenar o novo token
            localStorage.setItem(key, newJwtToken);
            
            console.log('‚úÖ Token convertido com sucesso!');
            console.log('üÜï Novo token (preview):', newJwtToken.substring(0, 50) + '...');
            
            tokenFixed = true;
            
            // Tamb√©m armazenar na chave padr√£o
            if (key !== 'auth_token') {
              localStorage.setItem('auth_token', newJwtToken);
            }
            
          } else {
            console.warn('‚ö†Ô∏è Token Base64 n√£o cont√©m dados de usu√°rio v√°lidos');
            console.log('üìã Dados encontrados:', Object.keys(tokenData));
          }
          
        } catch (error) {
          console.error('‚ùå Erro ao converter token Base64:', error.message);
        }
        
      } else {
        console.warn('‚ö†Ô∏è Token tem formato desconhecido');
        console.log('üî¢ N√∫mero de partes:', parts.length);
        console.log('üìè Tamanho:', token.length);
      }
    }
  }
  
  if (!tokenFound) {
    console.warn('‚ö†Ô∏è Nenhum token encontrado no localStorage');
    console.log('üí° Fa√ßa login para obter um token');
    
    // Mostrar todas as chaves para debug
    console.log('üóÇÔ∏è Chaves no localStorage:');
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      const value = localStorage.getItem(key);
      console.log(`  - ${key}: ${value ? value.substring(0, 30) + '...' : 'null'}`);
    }
  }
  
  console.groupEnd();
  
  // Resultado final
  if (tokenFixed) {
    console.log('üéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('üîÑ Recarregando a p√°gina em 2 segundos...');
    
    setTimeout(() => {
      window.location.reload();
    }, 2000);
    
  } else if (tokenFound) {
    console.log('‚ÑπÔ∏è Token encontrado mas nenhuma corre√ß√£o necess√°ria');
    
  } else {
    console.log('‚ùå Nenhum token encontrado para corrigir');
    console.log('üí° Acesse a p√°gina de login para obter um token');
  }
  
  return { tokenFound, tokenFixed };
}

// Fun√ß√£o para limpar tudo e recome√ßar
function clearAndRestart() {
  console.log('üßπ Limpando todos os dados de autentica√ß√£o...');
  
  // Limpar localStorage
  const keysToRemove = ['auth_token', 'authToken', 'token', 'user_session', 'user'];
  keysToRemove.forEach(key => {
    if (localStorage.getItem(key)) {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Removido: ${key}`);
    }
  });
  
  // Limpar cookies
  const cookiesToClear = ['auth_token', 'user_data', 'session_token'];
  cookiesToClear.forEach(cookieName => {
    document.cookie = `${cookieName}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
    console.log(`üç™ Cookie limpo: ${cookieName}`);
  });
  
  console.log('‚úÖ Limpeza conclu√≠da');
  console.log('üîÑ Redirecionando para login...');
  
  setTimeout(() => {
    window.location.href = '/login';
  }, 1000);
}

// Fun√ß√£o de diagn√≥stico
function diagnoseAuth() {
  console.group('üîç DIAGN√ìSTICO DE AUTENTICA√á√ÉO');
  
  // Verificar tokens
  const tokens = {};
  ['auth_token', 'authToken', 'token'].forEach(key => {
    const token = localStorage.getItem(key);
    if (token) {
      tokens[key] = {
        length: token.length,
        preview: token.substring(0, 30) + '...',
        parts: token.split('.').length,
        isJWT: token.split('.').length === 3
      };
    }
  });
  
  console.log('üé´ Tokens encontrados:', tokens);
  
  // Verificar cookies
  const cookies = document.cookie.split(';').reduce((acc, cookie) => {
    const [name, value] = cookie.trim().split('=');
    if (['auth_token', 'user_data', 'session_token'].includes(name)) {
      acc[name] = value ? value.substring(0, 30) + '...' : 'vazio';
    }
    return acc;
  }, {});
  
  console.log('üç™ Cookies relevantes:', cookies);
  
  // Verificar dados do usu√°rio
  const userSession = localStorage.getItem('user_session');
  if (userSession) {
    try {
      const userData = JSON.parse(userSession);
      console.log('üë§ Dados do usu√°rio:', {
        id: userData.id,
        name: userData.name,
        email: userData.email,
        role: userData.role
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao decodificar dados do usu√°rio:', error.message);
    }
  } else {
    console.log('üë§ Nenhum dado de usu√°rio encontrado');
  }
  
  console.groupEnd();
}

// Expor fun√ß√µes globalmente
window.fixAuthToken = fixAuthToken;
window.clearAndRestart = clearAndRestart;
window.diagnoseAuth = diagnoseAuth;

// Executar corre√ß√£o automaticamente
console.log('üöÄ Executando corre√ß√£o autom√°tica...');
fixAuthToken();

console.log(`
üìã COMANDOS DISPON√çVEIS:
  fixAuthToken()     - Corrigir token automaticamente
  clearAndRestart()  - Limpar tudo e ir para login
  diagnoseAuth()     - Diagn√≥stico completo
`); 