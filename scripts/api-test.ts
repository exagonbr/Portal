import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const API_BASE_URL = 'http://localhost:3001/api';
const API_DIR = path.join(__dirname, '../src/app/api');

const credentials = {
  email: 'admin@sabercon.edu.br',
  password: 'password123',
};

// Fun√ß√£o para fazer login e obter o token
async function getAuthToken(): Promise<string | null> {
  try {
    console.log('üîë Autenticando...');
    const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);
    const token = response.data?.data?.accessToken;
    if (token) {
      console.log('‚úÖ Autentica√ß√£o bem-sucedida!');
      return token;
    }
    console.error('‚ùå Token n√£o encontrado na resposta de login.');
    return null;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Falha na autentica√ß√£o:', error.response?.data || error.message);
    } else {
      console.error('‚ùå Falha na autentica√ß√£o (erro desconhecido):', error);
    }
    return null;
  }
}

// Fun√ß√£o para encontrar todas as rotas da API
function findApiRoutes(dir: string, prefix = ''): string[] {
  const routes: string[] = [];
  const entries = fs.readdirSync(dir, { withFileTypes: true });

  for (const entry of entries) {
    if (entry.isDirectory()) {
      // Ignora diret√≥rios especiais que n√£o fazem parte da rota
      if (entry.name.startsWith('_') || entry.name.startsWith('(')) {
        continue;
      }
      const newPrefix = `${prefix}/${entry.name}`;
      routes.push(...findApiRoutes(path.join(dir, entry.name), newPrefix));
    } else if (/^route\.(ts|js|tsx|jsx)$/.test(entry.name)) {
      // Encontrou um arquivo de rota. O prefixo √© a rota.
      routes.push(prefix || '/');
    }
  }
  return routes;
}


// Fun√ß√£o para testar uma √∫nica rota
async function testRoute(token: string, route: string) {
  // Pular rotas din√¢micas ou de autentica√ß√£o
  if (route.includes('[') || route.includes('login') || route.includes('register') || route.includes('refresh')) {
      console.log(`üü° Pulando rota din√¢mica ou de autentica√ß√£o: ${route}`);
      return;
  }

  const methodsToTest = ['GET', 'POST', 'PUT', 'DELETE'];

  for (const method of methodsToTest) {
    try {
      console.log(`‚ñ∂Ô∏è  Testando rota: ${method} ${route}`);
      const response = await axios({
        method,
        url: `${API_BASE_URL}${route}`,
        headers: {
          Authorization: `Bearer ${token}`,
        },
        // Envia um corpo vazio para m√©todos que o exigem
        data: method === 'POST' || method === 'PUT' ? {} : undefined,
      });
      console.log(`‚úÖ SUCESSO [${response.status}]: ${method} ${route}`);
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        const { status, data } = error.response;
        if (status === 405) {
          // 405 Method Not Allowed √© um resultado esperado para m√©todos n√£o implementados
          console.log(`‚ö™Ô∏è INFO [${status}]: ${method} ${route} (M√©todo n√£o permitido)`);
        } else if (status === 401 || status === 403) {
          console.warn(`üî¥ FALHA DE AUTORIZA√á√ÉO [${status}]: ${method} ${route} - ${JSON.stringify(data)}`);
        } else {
          console.error(`‚ùå FALHA [${status}]: ${method} ${route} - ${JSON.stringify(data)}`);
        }
      } else {
        console.error(`‚ùå ERRO DESCONHECIDO: ${method} ${route}`, error);
      }
    }
  }
}

// Fun√ß√£o principal
async function main() {
  const token = await getAuthToken();
  if (!token) {
    console.error('üõë Testes n√£o podem continuar sem um token de autentica√ß√£o.');
    return;
  }

  const allRoutes = findApiRoutes(API_DIR);
  console.log(`\nüîé Encontradas ${allRoutes.length} rotas para testar.`);
  
  // Filtra rotas duplicadas
  const uniqueRoutes = Array.from(new Set(allRoutes));
  console.log(`\nüöÄ Iniciando testes em ${uniqueRoutes.length} rotas √∫nicas...`);

  for (const route of uniqueRoutes) {
    await testRoute(token, route);
  }

  console.log('\n\nüèÅ Testes conclu√≠dos.');
}

main();
