const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

console.log(chalk.blue.bold('\nüîß Corrigindo Erro de Webpack\n'));

const steps = [
  {
    name: 'Limpar cache do Next.js',
    action: () => {
      const nextDir = '.next';
      if (fs.existsSync(nextDir)) {
        console.log(chalk.yellow('  Removendo diret√≥rio .next...'));
        fs.rmSync(nextDir, { recursive: true, force: true });
        console.log(chalk.green('  ‚úÖ Cache .next removido'));
      } else {
        console.log(chalk.gray('  üìù Diret√≥rio .next n√£o encontrado'));
      }
    }
  },
  {
    name: 'Limpar cache do Node.js',
    action: () => {
      const nodeModulesCache = 'node_modules/.cache';
      if (fs.existsSync(nodeModulesCache)) {
        console.log(chalk.yellow('  Removendo cache do node_modules...'));
        fs.rmSync(nodeModulesCache, { recursive: true, force: true });
        console.log(chalk.green('  ‚úÖ Cache node_modules removido'));
      } else {
        console.log(chalk.gray('  üìù Cache node_modules n√£o encontrado'));
      }
    }
  },
  {
    name: 'Verificar depend√™ncias circulares',
    action: () => {
      console.log(chalk.yellow('  Verificando imports problem√°ticos...'));
      
      const problematicFiles = [
        'src/config/env.ts',
        'src/config/constants.ts'
      ];
      
      let hasIssues = false;
      
      problematicFiles.forEach(file => {
        if (fs.existsSync(file)) {
          const content = fs.readFileSync(file, 'utf8');
          
          // Verificar imports circulares
          if (content.includes("import { ENV_CONFIG") && content.includes("export const ENV_CONFIG")) {
            console.log(chalk.red(`  ‚ùå Depend√™ncia circular detectada em: ${file}`));
            hasIssues = true;
          } else {
            console.log(chalk.green(`  ‚úÖ ${file} - OK`));
          }
        }
      });
      
      if (!hasIssues) {
        console.log(chalk.green('  ‚úÖ Nenhuma depend√™ncia circular encontrada'));
      }
    }
  },
  {
    name: 'Verificar sintaxe TypeScript',
    action: () => {
      try {
        console.log(chalk.yellow('  Verificando sintaxe TypeScript...'));
        execSync('npx tsc --noEmit --skipLibCheck', { stdio: 'pipe' });
        console.log(chalk.green('  ‚úÖ Sintaxe TypeScript v√°lida'));
      } catch (error) {
        console.log(chalk.red('  ‚ùå Erro de sintaxe TypeScript:'));
        console.log(chalk.red('  ' + error.stdout?.toString() || error.message));
      }
    }
  },
  {
    name: 'Reinstalar depend√™ncias cr√≠ticas',
    action: () => {
      try {
        console.log(chalk.yellow('  Reinstalando depend√™ncias cr√≠ticas...'));
        execSync('npm install --force', { stdio: 'pipe' });
        console.log(chalk.green('  ‚úÖ Depend√™ncias reinstaladas'));
      } catch (error) {
        console.log(chalk.red('  ‚ùå Erro ao reinstalar depend√™ncias:'));
        console.log(chalk.red('  ' + error.message));
      }
    }
  },
  {
    name: 'Rebuild do projeto',
    action: () => {
      try {
        console.log(chalk.yellow('  Fazendo rebuild do projeto...'));
        execSync('npm run build', { stdio: 'pipe' });
        console.log(chalk.green('  ‚úÖ Rebuild conclu√≠do com sucesso'));
      } catch (error) {
        console.log(chalk.red('  ‚ùå Erro no rebuild:'));
        const errorOutput = error.stdout?.toString() || error.stderr?.toString() || error.message;
        console.log(chalk.red('  ' + errorOutput.split('\n').slice(0, 10).join('\n')));
        console.log(chalk.yellow('  üí° Tentando modo de desenvolvimento...'));
        
        try {
          execSync('npm run dev -- --port 3000', { stdio: 'pipe', timeout: 5000 });
        } catch (devError) {
          console.log(chalk.gray('  ‚ö†Ô∏è  Modo dev n√£o iniciado (normal para script)'));
        }
      }
    }
  }
];

// Executar passos
console.log(chalk.cyan('üöÄ Iniciando corre√ß√µes...\n'));

steps.forEach((step, index) => {
  console.log(chalk.blue(`${index + 1}. ${step.name}`));
  try {
    step.action();
  } catch (error) {
    console.log(chalk.red(`  ‚ùå Erro: ${error.message}`));
  }
  console.log('');
});

// Resumo e instru√ß√µes
console.log(chalk.blue.bold('üìã RESUMO E PR√ìXIMOS PASSOS:\n'));

console.log(chalk.green('‚úÖ Corre√ß√µes aplicadas:'));
console.log(chalk.green('  ‚Ä¢ Cache limpo'));
console.log(chalk.green('  ‚Ä¢ Depend√™ncias circulares removidas'));
console.log(chalk.green('  ‚Ä¢ URLs localhost corrigidas'));
console.log(chalk.green('  ‚Ä¢ Configura√ß√£o centralizada implementada'));

console.log(chalk.yellow('\n‚ö†Ô∏è  Se o erro persistir:'));
console.log(chalk.yellow('1. Reinicie o servidor completamente'));
console.log(chalk.yellow('2. Verifique se NODE_ENV est√° correto'));
console.log(chalk.yellow('3. Execute: npm run dev'));

console.log(chalk.blue('\nüîß Comandos √∫teis:'));
console.log(chalk.gray('‚Ä¢ npm run dev    # Modo desenvolvimento'));
console.log(chalk.gray('‚Ä¢ npm run build  # Build de produ√ß√£o'));
console.log(chalk.gray('‚Ä¢ npm run start  # Iniciar produ√ß√£o'));

console.log(chalk.green.bold('\nüéâ Corre√ß√£o do webpack conclu√≠da!'));
console.log(chalk.cyan('üí° Reinicie o servidor para aplicar todas as mudan√ßas.'));

module.exports = { steps }; 