/**
 * Script de diagn√≥stico e reparo de autentica√ß√£o
 * Execute este script no console do navegador para diagnosticar problemas de auth
 */

console.log('üîç INICIANDO DIAGN√ìSTICO DE AUTENTICA√á√ÉO...');

// Fun√ß√£o para diagnosticar problemas de autentica√ß√£o
function diagnoseAuthProblems() {
  console.group('üìã DIAGN√ìSTICO COMPLETO');
  
  // 1. Verificar todas as chaves de token no localStorage
  console.group('üîë TOKENS NO LOCALSTORAGE');
  const tokenKeys = ['authToken', 'auth_token', 'token'];
  const foundTokens = {};
  
  tokenKeys.forEach(key => {
    const value = localStorage.getItem(key);
    if (value) {
      foundTokens[key] = {
        length: value.length,
        isJWT: value.split('.').length === 3,
        preview: value.substring(0, 50) + '...'
      };
      console.log(`‚úÖ ${key}:`, foundTokens[key]);
    } else {
      console.log(`‚ùå ${key}: n√£o encontrado`);
    }
  });
  console.groupEnd();
  
  // 2. Verificar dados de sess√£o
  console.group('üë§ DADOS DE SESS√ÉO');
  const sessionKeys = ['userSession', 'user_session'];
  sessionKeys.forEach(key => {
    const value = localStorage.getItem(key);
    if (value) {
      try {
        const parsed = JSON.parse(value);
        console.log(`‚úÖ ${key}:`, {
          hasUser: !!parsed.user,
          userId: parsed.user?.id,
          userName: parsed.user?.name,
          userRole: parsed.user?.role,
          expiresAt: parsed.expiresAt ? new Date(parsed.expiresAt) : 'N/A',
          isExpired: parsed.expiresAt ? parsed.expiresAt < Date.now() : 'N/A'
        });
      } catch (error) {
        console.log(`‚ùå ${key}: JSON inv√°lido`, error);
      }
    } else {
      console.log(`‚ùå ${key}: n√£o encontrado`);
    }
  });
  console.groupEnd();
  
  // 3. Verificar cookies
  console.group('üç™ COOKIES');
  const cookies = document.cookie.split(';');
  const authCookies = cookies.filter(cookie => {
    const name = cookie.trim().split('=')[0];
    return ['authToken', 'auth_token', 'userData', 'user_data'].includes(name);
  });
  
  if (authCookies.length > 0) {
    authCookies.forEach(cookie => {
      const [name, value] = cookie.trim().split('=');
      console.log(`‚úÖ ${name}:`, value ? value.substring(0, 50) + '...' : 'vazio');
    });
  } else {
    console.log('‚ùå Nenhum cookie de autentica√ß√£o encontrado');
  }
  console.groupEnd();
  
  console.groupEnd();
  return foundTokens;
}

// Fun√ß√£o para reparar problemas de autentica√ß√£o
function repairAuthProblems() {
  console.group('üîß REPARO AUTOM√ÅTICO');
  
  // 1. Encontrar o token JWT v√°lido
  const tokenKeys = ['authToken', 'auth_token', 'token'];
  let validToken = null;
  let validKey = null;
  
  for (const key of tokenKeys) {
    const token = localStorage.getItem(key);
    if (token && token.split('.').length === 3 && token.length > 100) {
      // Verificar se n√£o est√° expirado
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const isExpired = payload.exp && payload.exp < Math.floor(Date.now() / 1000);
        
        if (!isExpired) {
          validToken = token;
          validKey = key;
          console.log(`‚úÖ Token JWT v√°lido encontrado em: ${key}`);
          break;
        } else {
          console.log(`‚è∞ Token em ${key} est√° expirado`);
        }
      } catch (error) {
        console.log(`‚ùå Erro ao validar token em ${key}:`, error);
      }
    }
  }
  
  if (!validToken) {
    console.log('‚ùå Nenhum token JWT v√°lido encontrado');
    console.log('üí° Solu√ß√£o: Fa√ßa login novamente');
    console.groupEnd();
    return false;
  }
  
  // 2. Sincronizar token em todas as chaves padr√£o
  console.log('üîÑ Sincronizando token...');
  localStorage.setItem('authToken', validToken);
  localStorage.setItem('auth_token', validToken);
  
  // 3. Verificar se a sess√£o do usu√°rio est√° consistente
  const userSession = localStorage.getItem('userSession');
  if (userSession) {
    try {
      const sessionData = JSON.parse(userSession);
      if (sessionData.expiresAt && sessionData.expiresAt < Date.now()) {
        console.log('‚è∞ Sess√£o do usu√°rio expirada, removendo...');
        localStorage.removeItem('userSession');
      } else {
        console.log('‚úÖ Sess√£o do usu√°rio v√°lida');
      }
    } catch (error) {
      console.log('‚ùå Erro ao validar sess√£o do usu√°rio:', error);
      localStorage.removeItem('userSession');
    }
  }
  
  console.log('‚úÖ Reparo conclu√≠do');
  console.groupEnd();
  return true;
}

// Fun√ß√£o para testar a API ap√≥s o reparo
async function testApiAfterRepair() {
  console.group('üß™ TESTE DA API');
  
  const token = localStorage.getItem('auth_token') || localStorage.getItem('authToken');
  
  if (!token) {
    console.log('‚ùå Nenhum token encontrado para teste');
    console.groupEnd();
    return;
  }
  
  try {
    const response = await fetch('/api/auth/validate', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API funcionando corretamente!');
      console.log('üë§ Usu√°rio autenticado:', data.user?.name, data.user?.role);
    } else {
      console.log('‚ùå Erro na API:', response.status, data);
    }
  } catch (error) {
    console.log('‚ùå Erro de rede:', error);
  }
  
  console.groupEnd();
}

// Fun√ß√£o principal
async function fixAuthIssues() {
  console.log('üöÄ INICIANDO CORRE√á√ÉO DE PROBLEMAS DE AUTENTICA√á√ÉO');
  
  // 1. Diagnosticar
  const tokens = diagnoseAuthProblems();
  
  // 2. Reparar se necess√°rio
  const repaired = repairAuthProblems();
  
  // 3. Testar
  if (repaired) {
    await testApiAfterRepair();
  }
  
  console.log('‚úÖ Processo conclu√≠do');
  
  // 4. Dar instru√ß√µes finais
  console.group('üìù INSTRU√á√ïES FINAIS');
  if (repaired) {
    console.log('‚úÖ Problemas corrigidos! Recarregue a p√°gina para aplicar as mudan√ßas.');
    console.log('üîÑ Execute: location.reload()');
  } else {
    console.log('‚ùå N√£o foi poss√≠vel corrigir automaticamente.');
    console.log('üí° Solu√ß√µes manuais:');
    console.log('1. Execute: localStorage.clear() e fa√ßa login novamente');
    console.log('2. Ou execute: clearAllAuth() se a fun√ß√£o estiver dispon√≠vel');
  }
  console.groupEnd();
}

// Executar automaticamente
fixAuthIssues();

// Disponibilizar fun√ß√µes globalmente para uso manual
window.diagnoseAuth = diagnoseAuthProblems;
window.repairAuth = repairAuthProblems;
window.testApi = testApiAfterRepair;
window.fixAuth = fixAuthIssues;

console.log('üõ†Ô∏è Fun√ß√µes dispon√≠veis no console:');
console.log('- diagnoseAuth() - Diagnosticar problemas');
console.log('- repairAuth() - Reparar problemas');
console.log('- testApi() - Testar API');
console.log('- fixAuth() - Processo completo'); 