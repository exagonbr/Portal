#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß Iniciando corre√ß√£o de problemas de webpack hot reload...\n');

// Fun√ß√£o para limpar diret√≥rios
function cleanDirectory(dirPath) {
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true });
      console.log(`‚úÖ Limpeza: ${dirPath}`);
      return true;
    } catch (error) {
      console.log(`‚ùå Erro ao limpar ${dirPath}:`, error.message);
      return false;
    }
  }
  return true;
}

// Fun√ß√£o para executar comando
function runCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} conclu√≠do\n`);
    return true;
  } catch (error) {
    console.log(`‚ùå Erro em ${description}:`, error.message);
    return false;
  }
}

// Passo 1: Parar processos do Next.js
console.log('1Ô∏è‚É£ Parando processos existentes...');
try {
  if (process.platform === 'win32') {
    execSync('taskkill /f /im node.exe 2>nul || echo "Nenhum processo node encontrado"', { stdio: 'inherit' });
  } else {
    execSync('pkill -f "next dev" || echo "Nenhum processo next dev encontrado"', { stdio: 'inherit' });
  }
} catch (error) {
  console.log('‚ö†Ô∏è Erro ao parar processos (normal se nenhum processo estiver rodando)');
}

// Passo 2: Limpar caches
console.log('\n2Ô∏è‚É£ Limpando caches...');
const dirsToClean = [
  '.next',
  'node_modules/.cache',
  '.next/cache',
  '.next/static',
  '.next/server',
];

dirsToClean.forEach(dir => {
  cleanDirectory(path.join(process.cwd(), dir));
});

// Passo 3: Limpar cache do npm/yarn
console.log('\n3Ô∏è‚É£ Limpando cache do gerenciador de pacotes...');
runCommand('npm cache clean --force', 'Limpeza do cache npm');

// Passo 4: Reinstalar depend√™ncias cr√≠ticas
console.log('4Ô∏è‚É£ Reinstalando depend√™ncias cr√≠ticas...');
const criticalDeps = [
  'framer-motion',
  'next',
  'react',
  'react-dom'
];

criticalDeps.forEach(dep => {
  runCommand(`npm uninstall ${dep}`, `Removendo ${dep}`);
  runCommand(`npm install ${dep}`, `Reinstalando ${dep}`);
});

// Passo 5: Verificar configura√ß√µes
console.log('\n5Ô∏è‚É£ Verificando configura√ß√µes...');

// Verificar next.config.js
const nextConfigPath = path.join(process.cwd(), 'next.config.js');
if (fs.existsSync(nextConfigPath)) {
  console.log('‚úÖ next.config.js encontrado');
} else {
  console.log('‚ùå next.config.js n√£o encontrado');
}

// Verificar package.json
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packageJsonPath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    console.log('‚úÖ package.json v√°lido');
    console.log(`   Next.js: ${packageJson.dependencies?.next || 'n√£o encontrado'}`);
    console.log(`   React: ${packageJson.dependencies?.react || 'n√£o encontrado'}`);
    console.log(`   Framer Motion: ${packageJson.dependencies?.['framer-motion'] || 'n√£o encontrado'}`);
  } catch (error) {
    console.log('‚ùå Erro ao ler package.json:', error.message);
  }
}

// Passo 6: Criar arquivo de configura√ß√£o de desenvolvimento
console.log('\n6Ô∏è‚É£ Criando configura√ß√£o de desenvolvimento...');
const devConfigContent = `
// Configura√ß√£o para desenvolvimento local
if (typeof window !== 'undefined') {
  // Desabilitar warnings espec√≠ficos do webpack
  const originalWarn = console.warn;
  console.warn = function(...args) {
    if (args[0]?.includes?.('webpackHotUpdate') || 
        args[0]?.includes?.('MIME type') ||
        args[0]?.includes?.('framer-motion')) {
      return;
    }
    originalWarn.apply(console, args);
  };

  // Configurar tratamento de erros de chunk
  window.addEventListener('error', function(event) {
    if (event.message?.includes?.('Loading chunk') || 
        event.message?.includes?.('webpackHotUpdate')) {
      console.log('üîÑ Erro de chunk detectado, recarregando...');
      window.location.reload();
    }
  });
}
`;

fs.writeFileSync(path.join(process.cwd(), 'public', 'dev-config.js'), devConfigContent);
console.log('‚úÖ Configura√ß√£o de desenvolvimento criada em public/dev-config.js');

// Passo 7: Instru√ß√µes finais
console.log('\nüéâ Corre√ß√£o conclu√≠da!');
console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Execute: npm run dev');
console.log('2. Aguarde o servidor inicializar completamente');
console.log('3. Abra o navegador em http://localhost:3000');
console.log('4. Pressione Ctrl+Shift+R para for√ßar reload sem cache');
console.log('\n‚ö†Ô∏è Se ainda houver problemas:');
console.log('- Feche completamente o navegador e reabra');
console.log('- Limpe o cache do navegador manualmente');
console.log('- Execute este script novamente');

console.log('\n‚ú® Script conclu√≠do com sucesso!'); 