#!/usr/bin/env node

/**
 * Script para executar a migra√ß√£o de usu√°rios das colunas booleanas para a coluna role
 */
const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// Determina o diret√≥rio raiz do projeto
const rootDir = path.resolve(__dirname, '..');

// Verifica se estamos em ambiente de desenvolvimento ou produ√ß√£o
const isProd = process.env.NODE_ENV === 'production';

console.log('üìä Iniciando migra√ß√£o de roles de usu√°rio...');
console.log(`üîß Ambiente: ${isProd ? 'Produ√ß√£o' : 'Desenvolvimento'}`);

try {
  // Verifica se o arquivo de migra√ß√£o existe
  const migrationFile = path.join(rootDir, 'backend/migrations/20250602000001_migrate_user_boolean_to_role.ts');
  if (!fs.existsSync(migrationFile)) {
    throw new Error(`Arquivo de migra√ß√£o n√£o encontrado: ${migrationFile}`);
  }

  console.log('üîç Verificando configura√ß√£o do banco de dados...');
  
  // Verifica se o knexfile existe
  const knexfilePath = path.join(rootDir, 'backend/knexfile.js');
  if (!fs.existsSync(knexfilePath)) {
    throw new Error(`Arquivo de configura√ß√£o do Knex n√£o encontrado: ${knexfilePath}`);
  }

  // Executa a migra√ß√£o espec√≠fica
  console.log('üöÄ Executando migra√ß√£o de roles de usu√°rio...');
  const command = `cd "${path.join(rootDir, 'backend')}" && npx knex migrate:up 20250602000001_migrate_user_boolean_to_role.ts`;
  
  console.log(`Executando comando: ${command}`);
  try {
    execSync(command, { stdio: 'inherit' });
    
    console.log('‚úÖ Migra√ß√£o de roles de usu√°rio conclu√≠da com sucesso!');
    console.log('');
    console.log('‚ÑπÔ∏è  Agora a coluna role cont√©m os seguintes valores baseados nas colunas booleanas:');
    console.log('   - is_admin = true ‚Üí SYSTEM_ADMIN');
    console.log('   - is_manager = true ‚Üí INSTITUTION_MANAGER');
    console.log('   - is_coordinator = true ‚Üí ACADEMIC_COORDINATOR');
    console.log('   - is_teacher = true ‚Üí TEACHER');
    console.log('   - is_guardian = true ‚Üí GUARDIAN');
    console.log('   - nenhuma coluna = true ‚Üí STUDENT (padr√£o)');
    console.log('');
    console.log('üîÑ A prioridade segue a ordem acima em caso de m√∫ltiplas colunas com valor true.');
  } catch (execError) {
    console.error('‚ùå Erro ao executar a migra√ß√£o usando Knex:', execError.message);
    
    // Verifica se o erro est√° relacionado a problemas de compatibilidade de TypeScript
    if (execError.message.includes('TypeScript') || execError.message.includes('enum')) {
      console.log('');
      console.log('üí° Sugest√£o: O erro pode estar relacionado √† compatibilidade do TypeScript.');
      console.log('   Tente editar o arquivo de migra√ß√£o para usar constantes em vez de enum:');
      console.log('');
      console.log('   Substitua:');
      console.log('   enum UserRole { ... }');
      console.log('');
      console.log('   Por:');
      console.log('   const ROLE = {');
      console.log('     SYSTEM_ADMIN: "SYSTEM_ADMIN",');
      console.log('     ...');
      console.log('   }');
      console.log('');
      console.log('   E atualize todas as refer√™ncias de UserRole para ROLE no arquivo.');
    }
    
    // Se o erro estiver relacionado a m√≥dulos n√£o encontrados
    if (execError.message.includes('Cannot find module')) {
      console.log('');
      console.log('üí° Sugest√£o: O erro est√° relacionado a um m√≥dulo n√£o encontrado.');
      console.log('   Verifique se todas as importa√ß√µes no arquivo de migra√ß√£o apontam para caminhos corretos.');
      console.log('   Considere definir as constantes diretamente no arquivo de migra√ß√£o.');
    }
    
    process.exit(1);
  }
  
} catch (error) {
  console.error('‚ùå Erro ao executar a migra√ß√£o:', error.message);
  process.exit(1);
} 