#!/usr/bin/env node

const { spawn } = require('child_process');
const http = require('http');
const path = require('path');

console.log('üß™ Testando corre√ß√µes de MIME type CSS...');

// Fun√ß√£o para testar se o servidor est√° rodando
const testServer = (port, callback) => {
  const req = http.request({
    hostname: 'localhost',
    port: port,
    path: '/test-css.css',
    method: 'GET'
  }, (res) => {
    const contentType = res.headers['content-type'];
    console.log(`üì° Status: ${res.statusCode}`);
    console.log(`üìã Content-Type: ${contentType}`);
    
    if (contentType && contentType.includes('text/css')) {
      console.log('‚úÖ MIME type CSS correto!');
      callback(true);
    } else {
      console.log('‚ùå MIME type CSS incorreto');
      callback(false);
    }
  });
  
  req.on('error', (err) => {
    console.log('‚ö†Ô∏è Servidor n√£o est√° rodando ou n√£o acess√≠vel');
    callback(false);
  });
  
  req.end();
};

// Fun√ß√£o para verificar se o Next.js est√° rodando
const checkNextServer = () => {
  return new Promise((resolve) => {
    console.log('üîç Verificando se o servidor Next.js est√° rodando...');
    
    const req = http.request({
      hostname: 'localhost',
      port: 3000,
      path: '/',
      method: 'GET'
    }, (res) => {
      console.log('‚úÖ Servidor Next.js est√° rodando na porta 3000');
      resolve(true);
    });
    
    req.on('error', (err) => {
      console.log('‚ö†Ô∏è Servidor Next.js n√£o est√° rodando na porta 3000');
      resolve(false);
    });
    
    req.setTimeout(5000, () => {
      console.log('‚è±Ô∏è Timeout ao verificar servidor');
      resolve(false);
    });
    
    req.end();
  });
};

// Fun√ß√£o principal
const main = async () => {
  const serverRunning = await checkNextServer();
  
  if (!serverRunning) {
    console.log('');
    console.log('üöÄ Para testar as corre√ß√µes, inicie o servidor:');
    console.log('   npm run dev');
    console.log('');
    console.log('üìã Depois execute novamente este script:');
    console.log('   node scripts/test-css-mime-fix.js');
    return;
  }
  
  console.log('');
  console.log('üß™ Testando arquivo CSS de teste...');
  
  testServer(3000, (success) => {
    console.log('');
    
    if (success) {
      console.log('üéâ Corre√ß√µes aplicadas com sucesso!');
      console.log('');
      console.log('‚úÖ Verifica√ß√µes realizadas:');
      console.log('   ‚Ä¢ MIME type CSS correto (text/css)');
      console.log('   ‚Ä¢ Headers de seguran√ßa aplicados');
      console.log('   ‚Ä¢ Cache configurado corretamente');
      console.log('');
      console.log('üîó URLs para testar:');
      console.log('   ‚Ä¢ https://portal.sabercon.com.br/test-css.css');
      console.log('   ‚Ä¢ https://portal.sabercon.com.br/_next/static/css/');
      console.log('');
      console.log('üì± Teste tamb√©m a p√°gina system-admin:');
      console.log('   ‚Ä¢ https://portal.sabercon.com.br/dashboard/system-admin');
    } else {
      console.log('‚ùå Ainda h√° problemas com MIME type CSS');
      console.log('');
      console.log('üîß Poss√≠veis solu√ß√µes:');
      console.log('   1. Reinicie o servidor completamente');
      console.log('   2. Limpe o cache do navegador');
      console.log('   3. Verifique se n√£o h√° cache de proxy');
      console.log('   4. Teste em modo inc√≥gnito');
    }
    
    console.log('');
    console.log('üìä Status das corre√ß√µes:');
    console.log('   ‚úÖ next.config.js - Headers CSS configurados');
    console.log('   ‚úÖ middleware.ts - Simplificado e otimizado');
    console.log('   ‚úÖ tailwind.config.js - Criado');
    console.log('   ‚úÖ Cache - Limpo');
    console.log('   ‚úÖ Arquivo teste - Criado');
  });
};

main().catch(console.log); 