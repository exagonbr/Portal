/**
 * Script de Teste - Sistema de Sess√£o Persistente
 * Execute no console do navegador para testar a funcionalidade
 */

console.log('üß™ Iniciando testes do sistema de sess√£o persistente...\n');

// Fun√ß√£o para criar dados de teste
function createTestSession() {
  const testSession = {
    userId: 'test-user-123',
    email: 'teste@sabercon.com.br',
    name: 'Usu√°rio de Teste',
    role: 'SYSTEM_ADMIN',
    permissions: ['all'],
    accessToken: 'test-access-token-' + Date.now(),
    refreshToken: 'test-refresh-token-' + Date.now(),
    sessionId: 'test-session-' + Date.now(),
    expiresAt: Date.now() + (60 * 60 * 1000), // 1 hora
    refreshExpiresAt: Date.now() + (7 * 24 * 60 * 60 * 1000) // 7 dias
  };
  
  return testSession;
}

// Fun√ß√£o para testar salvamento
function testSaveSession() {
  console.log('üìù Teste 1: Salvamento de sess√£o');
  
  try {
    if (typeof SessionPersistenceService === 'undefined') {
      console.error('‚ùå SessionPersistenceService n√£o encontrado. Certifique-se de que est√° na p√°gina correta.');
      return false;
    }
    
    const testData = createTestSession();
    SessionPersistenceService.saveSession(testData);
    
    console.log('‚úÖ Sess√£o salva com sucesso');
    console.log('üìä Dados salvos:', testData);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao salvar sess√£o:', error);
    return false;
  }
}

// Fun√ß√£o para testar recupera√ß√£o
function testGetSession() {
  console.log('\nüìñ Teste 2: Recupera√ß√£o de sess√£o');
  
  try {
    const session = SessionPersistenceService.getSession();
    
    if (session) {
      console.log('‚úÖ Sess√£o recuperada com sucesso');
      console.log('üìä Dados recuperados:', session);
      return true;
    } else {
      console.log('‚ùå Nenhuma sess√£o encontrada');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao recuperar sess√£o:', error);
    return false;
  }
}

// Fun√ß√£o para testar valida√ß√£o
function testSessionValidation() {
  console.log('\n‚úÖ Teste 3: Valida√ß√£o de sess√£o');
  
  try {
    const isValid = SessionPersistenceService.isSessionValid();
    
    console.log(`üìä Sess√£o √© v√°lida: ${isValid}`);
    
    if (isValid) {
      console.log('‚úÖ Valida√ß√£o passou');
      return true;
    } else {
      console.log('‚ùå Sess√£o n√£o √© v√°lida');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o:', error);
    return false;
  }
}

// Fun√ß√£o para testar necessidade de refresh
function testRefreshNeeded() {
  console.log('\nüîÑ Teste 4: Verifica√ß√£o de necessidade de refresh');
  
  try {
    const needsRefresh = SessionPersistenceService.needsTokenRefresh();
    
    console.log(`üìä Precisa refresh: ${needsRefresh}`);
    console.log('‚úÖ Verifica√ß√£o de refresh funcionando');
    return true;
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de refresh:', error);
    return false;
  }
}

// Fun√ß√£o para testar armazenamento em m√∫ltiplos locais
function testMultipleStorage() {
  console.log('\nüíæ Teste 5: Armazenamento em m√∫ltiplos locais');
  
  try {
    // Verificar localStorage
    const localData = localStorage.getItem('session_data');
    console.log(`üìä localStorage: ${localData ? 'OK' : 'VAZIO'}`);
    
    // Verificar sessionStorage
    const sessionData = sessionStorage.getItem('session_data');
    console.log(`üìä sessionStorage: ${sessionData ? 'OK' : 'VAZIO'}`);
    
    // Verificar cookies
    const hasAuthCookie = document.cookie.includes('auth_token');
    console.log(`üìä Cookies: ${hasAuthCookie ? 'OK' : 'VAZIO'}`);
    
    const storageCount = [localData, sessionData, hasAuthCookie].filter(Boolean).length;
    console.log(`üìä Armazenamentos ativos: ${storageCount}/3`);
    
    if (storageCount > 0) {
      console.log('‚úÖ Armazenamento redundante funcionando');
      return true;
    } else {
      console.log('‚ùå Nenhum armazenamento ativo');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de armazenamento:', error);
    return false;
  }
}

// Fun√ß√£o para testar limpeza
function testClearSession() {
  console.log('\nüßπ Teste 6: Limpeza de sess√£o');
  
  try {
    SessionPersistenceService.clearSession();
    
    // Verificar se foi limpo
    const session = SessionPersistenceService.getSession();
    
    if (!session) {
      console.log('‚úÖ Sess√£o limpa com sucesso');
      return true;
    } else {
      console.log('‚ùå Sess√£o n√£o foi limpa completamente');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro na limpeza:', error);
    return false;
  }
}

// Fun√ß√£o para testar intercepta√ß√£o de limpeza
function testStorageProtection() {
  console.log('\nüõ°Ô∏è Teste 7: Prote√ß√£o contra limpeza');
  
  try {
    // Primeiro, salvar uma sess√£o
    const testData = createTestSession();
    SessionPersistenceService.saveSession(testData);
    
    console.log('üìù Sess√£o salva para teste de prote√ß√£o');
    
    // Tentar limpar localStorage
    console.log('üßπ Tentando localStorage.clear()...');
    localStorage.clear();
    
    // Verificar se a sess√£o ainda existe
    const session = SessionPersistenceService.getSession();
    
    if (session) {
      console.log('‚úÖ Prote√ß√£o funcionando - sess√£o preservada ap√≥s clear()');
      return true;
    } else {
      console.log('‚ùå Prote√ß√£o falhou - sess√£o foi perdida');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro no teste de prote√ß√£o:', error);
    return false;
  }
}

// Fun√ß√£o para executar todos os testes
async function runAllTests() {
  console.log('üöÄ Executando bateria completa de testes...\n');
  
  const tests = [
    { name: 'Salvamento', fn: testSaveSession },
    { name: 'Recupera√ß√£o', fn: testGetSession },
    { name: 'Valida√ß√£o', fn: testSessionValidation },
    { name: 'Refresh Check', fn: testRefreshNeeded },
    { name: 'Armazenamento M√∫ltiplo', fn: testMultipleStorage },
    { name: 'Prote√ß√£o Storage', fn: testStorageProtection },
    { name: 'Limpeza', fn: testClearSession }
  ];
  
  const results = [];
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      results.push({ name: test.name, success: result });
    } catch (error) {
      console.error(`‚ùå Erro no teste ${test.name}:`, error);
      results.push({ name: test.name, success: false });
    }
  }
  
  // Resumo dos resultados
  console.log('\nüìä RESUMO DOS TESTES:');
  console.log('==================');
  
  results.forEach(result => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${result.name}: ${result.success ? 'PASSOU' : 'FALHOU'}`);
  });
  
  const passedTests = results.filter(r => r.success).length;
  const totalTests = results.length;
  
  console.log(`\nüìà Resultado: ${passedTests}/${totalTests} testes passaram`);
  
  if (passedTests === totalTests) {
    console.log('üéâ TODOS OS TESTES PASSARAM! Sistema funcionando corretamente.');
  } else {
    console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
  }
  
  return { passedTests, totalTests, results };
}

// Fun√ß√£o para testar cen√°rios espec√≠ficos
function testSpecificScenario(scenario) {
  console.log(`üéØ Testando cen√°rio espec√≠fico: ${scenario}\n`);
  
  switch (scenario) {
    case 'refresh':
      return testRefreshNeeded();
    case 'storage':
      return testMultipleStorage();
    case 'protection':
      return testStorageProtection();
    case 'validation':
      return testSessionValidation();
    default:
      console.log('‚ùå Cen√°rio n√£o reconhecido. Op√ß√µes: refresh, storage, protection, validation');
      return false;
  }
}

// Fun√ß√£o para verificar status atual
function checkCurrentStatus() {
  console.log('üìä STATUS ATUAL DO SISTEMA DE SESS√ÉO');
  console.log('====================================');
  
  try {
    if (typeof SessionPersistenceService === 'undefined') {
      console.log('‚ùå SessionPersistenceService n√£o dispon√≠vel');
      return;
    }
    
    const session = SessionPersistenceService.getSession();
    const isValid = SessionPersistenceService.isSessionValid();
    const needsRefresh = SessionPersistenceService.needsTokenRefresh();
    
    console.log(`üìä Sess√£o existe: ${!!session}`);
    console.log(`üìä Sess√£o v√°lida: ${isValid}`);
    console.log(`üìä Precisa refresh: ${needsRefresh}`);
    
    if (session) {
      console.log(`üìä Usu√°rio: ${session.email}`);
      console.log(`üìä Role: ${session.role}`);
      console.log(`üìä Expira em: ${new Date(session.expiresAt).toLocaleString()}`);
      console.log(`üìä Refresh expira em: ${new Date(session.refreshExpiresAt).toLocaleString()}`);
    }
    
    // Verificar localStorage
    const localKeys = ['session_data', 'last_activity', 'accessToken', 'user'];
    localKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`üìä localStorage.${key}: ${value ? 'EXISTE' : 'VAZIO'}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error);
  }
}

// Exportar fun√ß√µes para uso global
window.testPersistentSession = {
  runAllTests,
  testSpecificScenario,
  checkCurrentStatus,
  testSaveSession,
  testGetSession,
  testSessionValidation,
  testRefreshNeeded,
  testMultipleStorage,
  testStorageProtection,
  testClearSession
};

console.log('‚úÖ Script de teste carregado!');
console.log('üìñ Como usar:');
console.log('  - testPersistentSession.runAllTests() - Executar todos os testes');
console.log('  - testPersistentSession.checkCurrentStatus() - Ver status atual');
console.log('  - testPersistentSession.testSpecificScenario("refresh") - Testar cen√°rio espec√≠fico');
console.log('  - testPersistentSession.testStorageProtection() - Testar prote√ß√£o');

// Auto-executar verifica√ß√£o de status se solicitado
if (typeof window !== 'undefined' && window.location.search.includes('autotest=true')) {
  console.log('\nüöÄ Auto-executando testes...');
  setTimeout(() => {
    runAllTests();
  }, 1000);
} 