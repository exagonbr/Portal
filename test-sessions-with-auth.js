const axios = require('axios');

async function testSessionsWithAuth() {
    const BACKEND_URL = 'http://localhost:3001';
    
    console.log('üß™ Testando POST /sessions/create com autentica√ß√£o v√°lida');
    console.log('=======================================================');
    
    // Primeiro, vamos tentar fazer login com credenciais conhecidas
    const testCredentials = [
        { email: 'admin@sabercon.edu.br', password: 'password123' },
        { email: 'gestor@sabercon.edu.br', password: 'password123' },
        { email: 'professor@sabercon.edu.br', password: 'password123' },
        { email: 'julia.c@ifsp.com', password: 'password123' },
        { email: 'coordenador@sabercon.edu.com', password: 'password123' },
        { email: 'renato@gmail.com', password: 'password123' }
    ];
    
    let validToken = null;
    let validUser = null;
    
    console.log('1. Tentando fazer login com usu√°rios existentes...');
    
    for (const credentials of testCredentials) {
        try {
            console.log(`   Testando login: ${credentials.email}`);
            
            const loginResponse = await axios.post(`${BACKEND_URL}/auth/login`, {
                email: credentials.email,
                password: credentials.password
            });
            
            if (loginResponse.data.success) {
                validToken = loginResponse.data.data.accessToken;
                validUser = loginResponse.data.data.user;
                console.log(`   ‚úÖ Login bem-sucedido com: ${credentials.email}`);
                console.log(`   üë§ Usu√°rio: ${validUser.name} (${validUser.role})`);
                break;
            }
            
        } catch (error) {
            console.log(`   ‚ùå Falha no login: ${credentials.email}`);
            if (error.response && error.response.data) {
                console.log(`      Erro: ${error.response.data.message}`);
            }
        }
    }
    
    if (!validToken) {
        console.log('\n‚ùå N√£o foi poss√≠vel fazer login com nenhum usu√°rio existente.');
        console.log('üí° Vamos tentar criar um usu√°rio de teste...');
        
        // Tentar criar um usu√°rio de teste (se a rota existir)
        try {
            const createUserResponse = await axios.post(`${BACKEND_URL}/users`, {
                email: 'teste@portal.com',
                fullName: 'Usu√°rio de Teste',
                password: 'teste123',
                enabled: true
            });
            
            if (createUserResponse.data.success) {
                console.log('‚úÖ Usu√°rio de teste criado com sucesso!');
                
                // Tentar fazer login com o usu√°rio criado
                const loginResponse = await axios.post(`${BACKEND_URL}/auth/login`, {
                    email: 'teste@portal.com',
                    password: 'teste123'
                });
                
                if (loginResponse.data.success) {
                    validToken = loginResponse.data.data.accessToken;
                    validUser = loginResponse.data.data.user;
                    console.log('‚úÖ Login com usu√°rio de teste bem-sucedido!');
                }
            }
        } catch (error) {
            console.log('‚ùå N√£o foi poss√≠vel criar usu√°rio de teste.');
        }
    }
    
    if (!validToken) {
        console.log('\n‚ùå N√£o foi poss√≠vel obter um token v√°lido.');
        console.log('üí° Verifique se h√° usu√°rios no banco de dados ou se o sistema de autentica√ß√£o est√° funcionando.');
        return;
    }
    
    console.log('\n2. Testando cria√ß√£o de sess√£o com token v√°lido...');
    console.log('================================================');
    
    // Teste 1: Criar sess√£o com email
    try {
        console.log('\nüìß Teste 1: Criando sess√£o com email...');
        
        const sessionResponse = await axios.post(`${BACKEND_URL}/sessions/create`, {
            email: validUser.email
        }, {
            headers: {
                'Authorization': `Bearer ${validToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Sess√£o criada com sucesso!');
        console.log('üìã Resposta:');
        console.log(JSON.stringify(sessionResponse.data, null, 2));
        
        // Salvar o sessionId para testes futuros
        const sessionId = sessionResponse.data.data?.sessionId;
        if (sessionId) {
            console.log(`üîë Session ID: ${sessionId}`);
        }
        
    } catch (error) {
        console.log('‚ùå Erro ao criar sess√£o com email:');
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        } else {
            console.log(`   Erro: ${error.message}`);
        }
    }
    
    // Teste 2: Criar sess√£o com userId
    try {
        console.log('\nüÜî Teste 2: Criando sess√£o com userId...');
        
        const sessionResponse = await axios.post(`${BACKEND_URL}/sessions/create`, {
            userId: validUser.id
        }, {
            headers: {
                'Authorization': `Bearer ${validToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Sess√£o criada com sucesso!');
        console.log('üìã Resposta:');
        console.log(JSON.stringify(sessionResponse.data, null, 2));
        
    } catch (error) {
        console.log('‚ùå Erro ao criar sess√£o com userId:');
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        } else {
            console.log(`   Erro: ${error.message}`);
        }
    }
    
    // Teste 3: Criar sess√£o com ambos os campos
    try {
        console.log('\nüìßüÜî Teste 3: Criando sess√£o com email e userId...');
        
        const sessionResponse = await axios.post(`${BACKEND_URL}/sessions/create`, {
            email: validUser.email,
            userId: validUser.id
        }, {
            headers: {
                'Authorization': `Bearer ${validToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Sess√£o criada com sucesso!');
        console.log('üìã Resposta:');
        console.log(JSON.stringify(sessionResponse.data, null, 2));
        
    } catch (error) {
        console.log('‚ùå Erro ao criar sess√£o com ambos os campos:');
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        } else {
            console.log(`   Erro: ${error.message}`);
        }
    }
    
    // Teste 4: Teste de valida√ß√£o (sem dados)
    try {
        console.log('\n‚ùå Teste 4: Testando valida√ß√£o (sem dados)...');
        
        const sessionResponse = await axios.post(`${BACKEND_URL}/sessions/create`, {
            // Payload vazio para testar valida√ß√£o
        }, {
            headers: {
                'Authorization': `Bearer ${validToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚ö†Ô∏è Resposta inesperada (deveria dar erro):');
        console.log(JSON.stringify(sessionResponse.data, null, 2));
        
    } catch (error) {
        console.log('‚úÖ Valida√ß√£o funcionando corretamente!');
        if (error.response) {
            console.log(`   Status: ${error.response.status}`);
            console.log(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        }
    }
    
    console.log('\nüéâ Testes completos!');
}

testSessionsWithAuth(); 