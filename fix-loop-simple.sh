#!/bin/bash

# Script simples para corrigir loop de rate limiting
# Portal Sabercon - Resolver 301/308 e loops de requisi√ß√µes
# Execute: bash fix-loop-simple.sh

echo "üîß CORRE√á√ÉO SIMPLES - LOOP DE RATE LIMITING"
echo "==========================================="

# 1. Desabilitar rate limiting criando vers√£o simplificada
echo "üîß Desabilitando rate limiting..."

cat > src/middleware/rateLimit.ts << 'EOF'
import { NextRequest, NextResponse } from 'next/server'
import { LRUCache } from 'lru-cache'

type Options = {
  uniqueTokenPerInterval?: number
  interval?: number
}

export default function rateLimit(options?: Options) {
  const tokenCache = new LRUCache({
    max: options?.uniqueTokenPerInterval || 500,
    ttl: options?.interval || 60000,
  })

  return {
    check: (request: NextRequest, limit: number, token: string) =>
      new Promise<void>((resolve, reject) => {
        // DESABILITADO: sempre resolve para evitar loops
        resolve()
      }),
  }
}

// Configura√ß√µes desabilitadas
export const rateLimiters = {
  public: rateLimit(),
  authenticated: rateLimit(),
  upload: rateLimit(),
  reports: rateLimit(),
}

// Helper DESABILITADO para aplicar rate limiting
export async function applyRateLimit(
  request: NextRequest,
  type: keyof typeof rateLimiters = 'authenticated',
  limit: number = 100
): Promise<NextResponse | null> {
  // COMPLETAMENTE DESABILITADO PARA EVITAR LOOPS
  console.log(`[RATE-LIMIT] DESABILITADO para ${request.url}`);
  return null;
}
EOF

echo "‚úÖ Rate limiting desabilitado"

# 2. Corrigir next.config.js para remover proxy em produ√ß√£o
echo "üîß Corrigindo next.config.js..."

# Backup
cp next.config.js next.config.js.backup.$(date +%Y%m%d-%H%M%S)

# Substituir apenas a fun√ß√£o rewrites
cat > temp_rewrites.js << 'EOF'
  // CORRE√á√ÉO: Configura√ß√£o de proxy mais espec√≠fica para evitar loops
  async rewrites() {
    // Em produ√ß√£o com ALB, N√ÉO usar proxy interno para evitar loops
    // O ALB j√° faz o roteamento correto
    if (process.env.NODE_ENV === 'production') {
      console.log('üö´ Proxy interno desabilitado em produ√ß√£o para evitar loops');
      return [];
    }
    
    // Apenas em desenvolvimento usar proxy
    const isDev = process.env.NODE_ENV === 'development';
    const apiDestination = 'https://portal.sabercon.com.br/api/:path*';
    
    console.log(`üîÑ Proxy configurado para desenvolvimento: ${apiDestination}`);
    
    return [
      {
        source: '/api/:path*',
        destination: apiDestination
      }
    ];
  },
EOF

# Substituir a fun√ß√£o rewrites no next.config.js
sed -i '/async rewrites()/,/},/c\
  // CORRE√á√ÉO: Configura√ß√£o de proxy mais espec√≠fica para evitar loops\
  async rewrites() {\
    // Em produ√ß√£o com ALB, N√ÉO usar proxy interno para evitar loops\
    // O ALB j√° faz o roteamento correto\
    if (process.env.NODE_ENV === '\''production'\'') {\
      console.log('\''üö´ Proxy interno desabilitado em produ√ß√£o para evitar loops'\'');\
      return [];\
    }\
    \
    // Apenas em desenvolvimento usar proxy\
    const isDev = process.env.NODE_ENV === '\''development'\'';\
    const apiDestination = '\''https://portal.sabercon.com.br/api/:path*'\'';\
    \
    console.log(`üîÑ Proxy configurado para desenvolvimento: ${apiDestination}`);\
    \
    return [\
      {\
        source: '\''/api/:path*'\'',\
        destination: apiDestination\
      }\
    ];\
  },' next.config.js

rm temp_rewrites.js

echo "‚úÖ next.config.js corrigido"

# 3. Criar .env.production otimizado
echo "üîß Criando .env.production otimizado..."

cat > .env.production << 'EOF'
# Produ√ß√£o - Portal Sabercon
NODE_ENV=production
NEXT_TELEMETRY_DISABLED=1

# URLs de produ√ß√£o (SEM proxy interno para evitar loops)
NEXTAUTH_URL=https://portal.sabercon.com.br
NEXT_PUBLIC_API_URL=https://portal.sabercon.com.br/api

# Backend interno (usado apenas pelo servidor)
BACKEND_URL=https://portal.sabercon.com.br/api

# Rate limiting desabilitado
RATE_LIMITING_ENABLED=false
MAX_REQUESTS_PER_MINUTE=1000

# Logs reduzidos
LOG_LEVEL=warn
ENABLE_REQUEST_LOGGING=false
EOF

echo "‚úÖ .env.production criado"

# 4. Limpar cache e rebuild
echo "üßπ Limpando cache..."
rm -rf .next
rm -rf node_modules/.cache

echo "üì¶ Fazendo rebuild..."
npm run build

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ CORRE√á√ÉO SIMPLES CONCLU√çDA COM SUCESSO!"
    echo "========================================="
    echo ""
    echo "üîß Corre√ß√µes aplicadas:"
    echo "   ‚Ä¢ Rate limiting completamente desabilitado"
    echo "   ‚Ä¢ Proxy interno removido em produ√ß√£o"
    echo "   ‚Ä¢ .env.production otimizado"
    echo "   ‚Ä¢ Cache limpo e rebuild conclu√≠do"
    echo ""
    echo "üß™ Teste agora:"
    echo "   https://portal.sabercon.com.br/"
    echo ""
    echo "üìù No servidor, execute:"
    echo "   bash deploy-production.sh"
    echo "   pm2 restart all"
    echo ""
    echo "üìä Monitorar:"
    echo "   pm2 logs --lines 20"
    echo "   curl -I https://portal.sabercon.com.br/api/health"
    echo ""
    echo "‚ö†Ô∏è  RATE LIMITING COMPLETAMENTE DESABILITADO"
    echo "   Sistema funcionar√° sem limita√ß√£o de requisi√ß√µes"
    echo ""
else
    echo ""
    echo "‚ùå ERRO NO BUILD"
    echo "==============="
    echo ""
    echo "üìù Restaurando backup do next.config.js..."
    
    # Restaurar backup se build falhou
    if [ -f "next.config.js.backup.$(date +%Y%m%d)*" ]; then
        cp next.config.js.backup.* next.config.js
        echo "‚úÖ Backup restaurado"
    fi
    
    echo "üí° Tente executar manualmente: npm run build"
    exit 1
fi 