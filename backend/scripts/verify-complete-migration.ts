import knex from 'knex';
import config from '../knexfile';

/**
 * üîç Script de Verifica√ß√£o da Migra√ß√£o
 * 
 * Verifica se a migra√ß√£o MySQL ‚Üí PostgreSQL foi executada corretamente
 */

const db = knex(config.development);

interface TableInfo {
  name: string;
  count: number;
  status: string;
}

async function verifyMigration(): Promise<void> {
  console.log('üîç Verificando migra√ß√£o MySQL ‚Üí PostgreSQL...\n');

  try {
    // 1. Verificar conectividade
    console.log('1Ô∏è‚É£ Testando conex√£o PostgreSQL...');
    await db.raw('SELECT 1');
    console.log('‚úÖ Conex√£o PostgreSQL: OK\n');

    // 2. Verificar tabelas essenciais
    console.log('2Ô∏è‚É£ Verificando tabelas essenciais...');
    const essentialTables = [
      'roles', 'permissions', 'role_permissions',
      'institutions', 'schools', 'users',
      'courses', 'content', 'files',
      'quizzes', 'questions', 'answers',
      'system_settings', 'email_templates'
    ];

    const tableStatus: TableInfo[] = [];

    for (const tableName of essentialTables) {
      try {
        const [result] = await db(tableName).count('* as count');
        const count = parseInt(result.count as string);
        tableStatus.push({
          name: tableName,
          count,
          status: '‚úÖ OK'
        });
      } catch (error) {
        tableStatus.push({
          name: tableName,
          count: 0,
          status: '‚ùå ERRO'
        });
      }
    }

    // Exibir status das tabelas
    console.table(tableStatus);

    // 3. Verificar roles
    console.log('\n3Ô∏è‚É£ Verificando roles...');
    const roles = await db('roles').select('name', 'code', 'is_active');
    console.table(roles);

    // 4. Verificar institui√ß√£o padr√£o
    console.log('\n4Ô∏è‚É£ Verificando institui√ß√£o padr√£o...');
    const institutions = await db('institutions').select('name', 'code', 'type', 'is_active');
    console.table(institutions);

    // 5. Verificar configura√ß√µes do sistema
    console.log('\n5Ô∏è‚É£ Verificando configura√ß√µes...');
    const settings = await db('system_settings')
      .select('key', 'value', 'category')
      .where('is_system', true)
      .limit(10);
    console.table(settings);

    // 6. Verificar permiss√µes
    console.log('\n6Ô∏è‚É£ Verificando permiss√µes...');
    const permissionCount = await db('permissions').count('* as count').first();
    const rolePermissionCount = await db('role_permissions').count('* as count').first();
    
    console.log(`üìä Permiss√µes criadas: ${permissionCount?.count}`);
    console.log(`üîó Role-Permiss√µes configuradas: ${rolePermissionCount?.count}`);

    // 7. Verificar √≠ndices importantes
    console.log('\n7Ô∏è‚É£ Verificando √≠ndices...');
    const indexes = await db.raw(`
      SELECT 
        tablename,
        indexname,
        indexdef
      FROM pg_indexes 
      WHERE schemaname = 'public' 
        AND tablename IN ('users', 'roles', 'institutions')
      ORDER BY tablename, indexname
    `);
    
    console.log(`üìà √çndices encontrados: ${indexes.rows.length}`);

    // 8. Verificar constraints
    console.log('\n8Ô∏è‚É£ Verificando constraints...');
    const constraints = await db.raw(`
      SELECT 
        table_name,
        constraint_name,
        constraint_type
      FROM information_schema.table_constraints
      WHERE table_schema = 'public'
        AND constraint_type IN ('FOREIGN KEY', 'UNIQUE', 'PRIMARY KEY')
      ORDER BY table_name, constraint_type
    `);
    
    console.log(`üîí Constraints encontradas: ${constraints.rows.length}`);

    // 9. Verificar sequences (auto-increment)
    console.log('\n9Ô∏è‚É£ Verificando sequences...');
    const sequences = await db.raw(`
      SELECT sequence_name 
      FROM information_schema.sequences 
      WHERE sequence_schema = 'public'
    `);
    
    console.log(`üî¢ Sequences encontradas: ${sequences.rows.length}`);

    // 10. Resumo final
    console.log('\nüìä RESUMO DA VERIFICA√á√ÉO:');
    
    const totalTables = tableStatus.length;
    const successfulTables = tableStatus.filter(t => t.status === '‚úÖ OK').length;
    const failedTables = totalTables - successfulTables;

    console.log(`
‚úÖ Tabelas criadas com sucesso: ${successfulTables}/${totalTables}
‚ùå Tabelas com erro: ${failedTables}
üìä Total de permiss√µes: ${permissionCount?.count}
üîó Role-permiss√µes configuradas: ${rolePermissionCount?.count}
üìà √çndices criados: ${indexes.rows.length}
üîí Constraints aplicadas: ${constraints.rows.length}
üî¢ Sequences configuradas: ${sequences.rows.length}
    `);

    if (failedTables > 0) {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Algumas tabelas apresentaram problemas!');
      console.log('   Verifique os logs de migra√ß√£o e execute novamente se necess√°rio.');
      process.exit(1);
    } else {
      console.log('üéâ MIGRA√á√ÉO VERIFICADA COM SUCESSO!');
      console.log('   O sistema est√° pronto para receber dados do MySQL.');
      console.log('\nüîó Pr√≥ximos passos:');
      console.log('   1. Acesse: http://localhost:3000/admin/migration/mysql-postgres');
      console.log('   2. Configure conex√£o MySQL');
      console.log('   3. Execute migra√ß√£o de dados');
    }

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
    process.exit(1);
  } finally {
    await db.destroy();
  }
}

// Executar verifica√ß√£o
verifyMigration().catch(console.error);
