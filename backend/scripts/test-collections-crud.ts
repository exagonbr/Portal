import { AppDataSource } from '../src/config/typeorm.config';
import { VideoCollectionService } from '../src/services/VideoCollectionService';
import { VideoCollection } from '../src/entities/VideoCollection';

async function testCollectionsCRUD() {
  try {
    console.log('üöÄ Iniciando teste de CRUD de cole√ß√µes...');
    
    // Inicializar conex√£o TypeORM
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Conex√£o TypeORM inicializada');
    }
    
    const collectionService = new VideoCollectionService();
    
    // 1. Criar uma cole√ß√£o de teste
    console.log('\nüìù Criando cole√ß√£o de teste...');
    const testCollection = await collectionService.createCollection({
      name: 'Cole√ß√£o de Teste - Matem√°tica B√°sica',
      synopsis: 'Uma cole√ß√£o educativa sobre conceitos fundamentais de matem√°tica para ensino fundamental.',
      producer: 'Editora Educacional Teste',
      release_date: new Date('2024-01-15'),
      contract_expiry_date: new Date('2025-12-31'),
      authors: ['Prof. Jo√£o Silva', 'Prof. Maria Santos'],
      target_audience: ['ENSINO_FUNDAMENTAL', 'ANOS_INICIAIS'],
      total_hours: '02:30:00',
      poster_image_url: 'https://example.com/poster-matematica.jpg',
      carousel_image_url: 'https://example.com/carousel-matematica.jpg',
      ebook_file_url: 'https://example.com/manual-matematica.pdf',
      use_default_cover_for_videos: true,
      popularity: 8.5,
      vote_average: 4.2,
      vote_count: 150
    });
    
    console.log('‚úÖ Cole√ß√£o criada:', testCollection.id, '-', testCollection.name);
    
    // 2. Criar v√≠deos de teste
    console.log('\nüé• Criando v√≠deos de teste...');
    const video1 = await collectionService.createVideo({
      collection_id: testCollection.id,
      module_number: 1,
      title: 'Introdu√ß√£o aos N√∫meros',
      synopsis: 'Aprenda os conceitos b√°sicos sobre n√∫meros naturais e suas opera√ß√µes.',
      release_year: 2024,
      duration: '00:25:30',
      education_cycle: 'ENSINO_FUNDAMENTAL',
      poster_image_url: 'https://example.com/video1-poster.jpg',
      video_url: 'https://example.com/video1.mp4',
      order_in_module: 1
    });
    
    const video2 = await collectionService.createVideo({
      collection_id: testCollection.id,
      module_number: 1,
      title: 'Opera√ß√µes B√°sicas',
      synopsis: 'Adi√ß√£o, subtra√ß√£o, multiplica√ß√£o e divis√£o explicadas de forma simples.',
      release_year: 2024,
      duration: '00:30:15',
      education_cycle: 'ENSINO_FUNDAMENTAL',
      order_in_module: 2
    });
    
    console.log('‚úÖ V√≠deo 1 criado:', video1.id, '-', video1.title);
    console.log('‚úÖ V√≠deo 2 criado:', video2.id, '-', video2.title);
    
    // 3. Buscar cole√ß√£o com v√≠deos
    console.log('\nüîç Buscando cole√ß√£o com v√≠deos...');
    const collectionWithVideos = await collectionService.getCollectionWithVideos(testCollection.id);
    
    if (collectionWithVideos) {
      console.log('‚úÖ Cole√ß√£o encontrada:', collectionWithVideos.name);
      console.log('üìπ Total de v√≠deos:', collectionWithVideos.videos.length);
      collectionWithVideos.videos.forEach((video, index) => {
        console.log(`   ${index + 1}. M√≥dulo ${video.module_number} - ${video.title} (${video.duration})`);
      });
    }
    
    // 4. Listar todas as cole√ß√µes
    console.log('\nüìã Listando todas as cole√ß√µes...');
    const allCollections = await collectionService.getAllCollectionsForManagement();
    console.log('‚úÖ Total de cole√ß√µes:', allCollections.length);
    allCollections.forEach((collection, index) => {
      console.log(`   ${index + 1}. ${collection.name} (${collection.video_count} v√≠deos)`);
    });
    
    // 5. Buscar cole√ß√µes p√∫blicas
    console.log('\nüåê Buscando cole√ß√µes p√∫blicas...');
    const publicCollections = await collectionService.getPublicCollections();
    console.log('‚úÖ Cole√ß√µes p√∫blicas:', publicCollections.length);
    
    // 6. Pesquisar cole√ß√µes
    console.log('\nüîé Pesquisando por "matem√°tica"...');
    const searchResults = await collectionService.searchCollections('matem√°tica');
    console.log('‚úÖ Resultados da pesquisa:', searchResults.length);
    
    // 7. Atualizar cole√ß√£o
    console.log('\n‚úèÔ∏è  Atualizando cole√ß√£o...');
    const updatedCollection = await collectionService.updateCollection(testCollection.id, {
      synopsis: 'Uma cole√ß√£o educativa ATUALIZADA sobre conceitos fundamentais de matem√°tica.',
      popularity: 9.0,
      vote_count: 200
    });
    
    if (updatedCollection) {
      console.log('‚úÖ Cole√ß√£o atualizada - Nova popularidade:', updatedCollection.popularity);
    }
    
    // 8. Buscar pr√≥ximo n√∫mero de m√≥dulo
    console.log('\nüî¢ Testando pr√≥ximo n√∫mero de m√≥dulo...');
    const nextModule = await collectionService.getNextModuleNumber(testCollection.id);
    console.log('‚úÖ Pr√≥ximo n√∫mero de m√≥dulo:', nextModule);
    
    // 9. Buscar pr√≥xima ordem no m√≥dulo
    const nextOrder = await collectionService.getNextOrderInModule(testCollection.id, 1);
    console.log('‚úÖ Pr√≥xima ordem no m√≥dulo 1:', nextOrder);
    
    // 10. Contar v√≠deos na cole√ß√£o
    const videoCount = await collectionService.getVideoCountForCollection(testCollection.id);
    console.log('‚úÖ Total de v√≠deos na cole√ß√£o:', videoCount);
    
    console.log('\nüéâ Teste de CRUD conclu√≠do com sucesso!');
    console.log('\nüìä Resumo:');
    console.log('- ‚úÖ Cria√ß√£o de cole√ß√£o: OK');
    console.log('- ‚úÖ Cria√ß√£o de v√≠deos: OK');
    console.log('- ‚úÖ Busca com relacionamentos: OK');
    console.log('- ‚úÖ Listagem para gerenciamento: OK');
    console.log('- ‚úÖ API p√∫blica: OK');
    console.log('- ‚úÖ Pesquisa: OK');
    console.log('- ‚úÖ Atualiza√ß√£o: OK');
    console.log('- ‚úÖ Fun√ß√µes auxiliares: OK');
    
  } catch (error) {
    console.log('üí• Erro durante o teste:', error);
  } finally {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîå Conex√£o TypeORM finalizada');
    }
    process.exit(0);
  }
}

// Executar o teste
testCollectionsCRUD(); 