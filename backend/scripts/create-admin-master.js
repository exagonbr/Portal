#!/usr/bin/env node

const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');
const knex = require('knex');
const path = require('path');
require('dotenv').config();

console.log('üëë CRIANDO ADMIN MASTER - PORTAL EDUCACIONAL');
console.log('='.repeat(50));

// Configura√ß√£o do banco PostgreSQL
const dbConfig = {
  client: 'pg',
  connection: {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'root',
    database: process.env.DB_NAME || 'portal_sabercon'
  },
  pool: {
    min: 2,
    max: 10
  },
  migrations: {
    tableName: 'knex_migrations'
  }
};

// Dados do Admin Master
const ADMIN_DATA = {
  email: 'maia.cspg@gmail.com',
  password: 'maia.cspg@gmail.com',
  name: 'Admin Master',
  role: 'admin_master'
};

async function createAdminMaster() {
  let db;
  
  try {
    console.log('üîå Conectando ao PostgreSQL...');
    db = knex(dbConfig);
    
    // Testar conex√£o
    await db.raw('SELECT 1');
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida');

    // Verificar se usu√°rio j√° existe
    console.log('\nüîç Verificando se admin j√° existe...');
    const existingUser = await db('users')
      .where('email', ADMIN_DATA.email)
      .first();

    if (existingUser) {
      console.log('‚ö†Ô∏è  Admin com email j√° existe. Atualizando dados...');
      
      // Atualizar usu√°rio existente
      const hashedPassword = await bcrypt.hash(ADMIN_DATA.password, 12);
      
      await db('users')
        .where('email', ADMIN_DATA.email)
        .update({
          name: ADMIN_DATA.name,
          password: hashedPassword,
          role: ADMIN_DATA.role,
          is_active: true,
          is_verified: true,
          updated_at: new Date(),
          // Campos espec√≠ficos para admin master
          permissions: JSON.stringify([
            'admin_master',
            'user_management',
            'institution_management',
            'content_management',
            'analytics_access',
            'system_settings',
            'backup_restore',
            'migration_control'
          ])
        });

      console.log('‚úÖ Admin Master atualizado com sucesso!');
      
    } else {
      console.log('‚ûï Criando novo Admin Master...');
      
      // Hash da senha
      const hashedPassword = await bcrypt.hash(ADMIN_DATA.password, 12);
      const userId = uuidv4();
      
      // Criar novo usu√°rio admin
      await db('users').insert({
        id: userId,
        email: ADMIN_DATA.email,
        name: ADMIN_DATA.name,
        password: hashedPassword,
        role: ADMIN_DATA.role,
        is_active: true,
        is_verified: true,
        email_verified_at: new Date(),
        created_at: new Date(),
        updated_at: new Date(),
        // Campos espec√≠ficos para admin master
        permissions: JSON.stringify([
          'admin_master',
          'user_management', 
          'institution_management',
          'content_management',
          'analytics_access',
          'system_settings',
          'backup_restore',
          'migration_control'
        ]),
        // Metadados do admin
        metadata: JSON.stringify({
          admin_level: 'master',
          created_by: 'system',
          admin_notes: 'Admin Master criado via script de inicializa√ß√£o',
          access_level: 'unlimited'
        })
      });

      console.log('‚úÖ Admin Master criado com sucesso!');
      
      // Criar perfil de usu√°rio se a tabela existir
      try {
        const profileExists = await db.schema.hasTable('user_profiles');
        
        if (profileExists) {
          const existingProfile = await db('user_profiles')
            .where('user_id', userId)
            .first();
            
          if (!existingProfile) {
            await db('user_profiles').insert({
              id: uuidv4(),
              user_id: userId,
              bio: 'Administrador Master do Portal Educacional',
              avatar_url: null,
              phone: null,
              address: null,
              preferences: JSON.stringify({
                theme: 'dark',
                language: 'pt-BR',
                notifications: {
                  email: true,
                  push: true,
                  sms: false
                },
                dashboard: {
                  layout: 'admin',
                  widgets: ['users', 'content', 'analytics', 'system']
                }
              }),
              created_at: new Date(),
              updated_at: new Date()
            });
            
            console.log('‚úÖ Perfil do Admin Master criado');
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel criar perfil (tabela pode n√£o existir)');
      }
    }

    // Verificar se tabela de sessions existe e limpar sessions antigas se necess√°rio
    try {
      const sessionsExists = await db.schema.hasTable('user_sessions');
      if (sessionsExists) {
        await db('user_sessions')
          .where('user_id', '=', db('users').select('id').where('email', ADMIN_DATA.email))
          .del();
        console.log('‚úÖ Sessions antigas do admin limpas');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel limpar sessions (tabela pode n√£o existir)');
    }

    // Verificar e exibir informa√ß√µes finais
    console.log('\nüìã INFORMA√á√ïES DO ADMIN MASTER:');
    console.log('='.repeat(50));
    
    const adminUser = await db('users')
      .where('email', ADMIN_DATA.email)
      .select('id', 'email', 'name', 'role', 'is_active', 'created_at', 'permissions')
      .first();

    if (adminUser) {
      console.log(`üë§ ID: ${adminUser.id}`);
      console.log(`üìß Email: ${adminUser.email}`);
      console.log(`üë®‚Äçüíº Nome: ${adminUser.name}`);
      console.log(`üîë Role: ${adminUser.role}`);
      console.log(`‚úÖ Ativo: ${adminUser.is_active}`);
      console.log(`üìÖ Criado em: ${adminUser.created_at}`);
      
      if (adminUser.permissions) {
        const permissions = JSON.parse(adminUser.permissions);
        console.log(`üõ°Ô∏è  Permiss√µes: ${permissions.join(', ')}`);
      }
    }

    console.log('\nüéØ CREDENCIAIS DE ACESSO:');
    console.log('='.repeat(50));
    console.log(`üìß Email: ${ADMIN_DATA.email}`);
    console.log(`üîê Senha: ${ADMIN_DATA.password}`);
    
    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('='.repeat(50));
    console.log('1. Acesse o portal usando as credenciais acima');
    console.log('2. Altere a senha ap√≥s o primeiro login');
    console.log('3. Configure as institui√ß√µes e usu√°rios');
    console.log('4. Verifique as permiss√µes do sistema');
    console.log('5. Configure integra√ß√µes necess√°rias');

    console.log('\n‚úÖ Admin Master configurado com sucesso! üëë');

  } catch (error) {
    console.error('\n‚ùå Erro ao criar Admin Master:', error);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° DICAS PARA RESOLVER:');
      console.log('1. Verifique se o PostgreSQL est√° rodando');
      console.log('2. Confirme as credenciais no arquivo .env');
      console.log('3. Teste a conex√£o: psql -h localhost -U postgres -d portal_educacional');
    } else if (error.code === '42P01') {
      console.log('\nüí° TABELA N√ÉO ENCONTRADA:');
      console.log('1. Execute as migrations: npm run migrate');
      console.log('2. Verifique se a migra√ß√£o dos dados foi conclu√≠da');
      console.log('3. Confirme se est√° no banco correto');
    }
    
    process.exit(1);
  } finally {
    if (db) {
      await db.destroy();
      console.log('\nüîå Conex√£o fechada');
    }
  }
}

// Fun√ß√£o para verificar pr√©-requisitos
async function checkPrerequisites() {
  console.log('üîç Verificando pr√©-requisitos...\n');

  // Verificar vari√°veis de ambiente
  const requiredEnvVars = ['DB_HOST', 'DB_PORT', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  Vari√°veis de ambiente faltando:');
    missingVars.forEach(varName => {
      console.log(`   - ${varName}`);
    });
    console.log('\nüí° Configura√ß√£o padr√£o ser√° utilizada');
  } else {
    console.log('‚úÖ Vari√°veis de ambiente configuradas');
  }

  // Verificar se bcryptjs est√° instalado
  try {
    require('bcryptjs');
    console.log('‚úÖ bcryptjs dispon√≠vel');
  } catch (error) {
    console.log('‚ùå bcryptjs n√£o encontrado. Execute: npm install bcryptjs');
    process.exit(1);
  }

  // Verificar se uuid est√° instalado
  try {
    require('uuid');
    console.log('‚úÖ uuid dispon√≠vel');
  } catch (error) {
    console.log('‚ùå uuid n√£o encontrado. Execute: npm install uuid');
    process.exit(1);
  }

  console.log('‚úÖ Pr√©-requisitos verificados\n');
}

// Executar script
async function main() {
  try {
    await checkPrerequisites();
    await createAdminMaster();
  } catch (error) {
    console.error('‚ùå Erro fatal:', error.message);
    process.exit(1);
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { createAdminMaster }; 