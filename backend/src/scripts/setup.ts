#!/usr/bin/env node

import { AppDataSource } from '../config/typeorm.config';
import AuthService from '../services/AuthService';
import { testRedisConnection } from '../config/redis';
import getRedisClient from '../config/redis';
import * as dotenv from 'dotenv';

// Carrega vari√°veis de ambiente
dotenv.config();

async function setupDatabase() {
  console.log('üóÑÔ∏è  Configurando banco de dados...');
  
  try {
    // Inicializa conex√£o com o banco
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Conex√£o com banco de dados estabelecida');
    }

    // Executa migra√ß√µes se necess√°rio
    const pendingMigrations = await AppDataSource.showMigrations();
    if (pendingMigrations) {
      console.log('üìã Executando migra√ß√µes pendentes...');
      await AppDataSource.runMigrations();
      console.log('‚úÖ Migra√ß√µes executadas com sucesso');
    }

    console.log('‚úÖ Banco de dados configurado com sucesso');
  } catch (error) {
    console.log('‚ùå Erro ao configurar banco de dados:', error);
    throw error;
  }
}

async function setupRedis() {
  console.log('üî¥ Configurando Redis...');
  
  try {
    const redisConnected = await testRedisConnection();
    if (!redisConnected) {
      throw new Error('Falha na conex√£o com Redis');
    }
    console.log('‚úÖ Redis configurado com sucesso');
  } catch (error) {
    console.log('‚ùå Erro ao configurar Redis:', error);
    throw error;
  }
}

async function createDefaultData() {
  console.log('üë• Criando dados padr√£o...');
  
  try {
    // Aviso sobre a necessidade de implementar a cria√ß√£o de dados padr√£o
    console.log('‚ö†Ô∏è Funcionalidade de cria√ß√£o de dados padr√£o precisa ser implementada');
    console.log('üìã Verifique a implementa√ß√£o em AuthService ou crie os dados manualmente');
    
    console.log('‚úÖ Setup de dados padr√£o conclu√≠do');
  } catch (error) {
    console.log('‚ùå Erro ao criar dados padr√£o:', error);
    throw error;
  }
}

async function cleanupExpiredSessions() {
  console.log('üßπ Limpando sess√µes expiradas...');
  
  try {
    const redis = getRedisClient();
    
    // Limpa tokens blacklisted expirados
    const blacklistedKeys = await redis.keys('blacklisted_tokens:*');
    for (const key of blacklistedKeys) {
      const ttl = await redis.ttl(key);
      if (ttl <= 0) {
        await redis.del(key);
      }
    }
    
    // Limpa sess√µes √≥rf√£s
    const sessionKeys = await redis.keys('session:*');
    for (const key of sessionKeys) {
      const ttl = await redis.ttl(key);
      if (ttl <= 0) {
        await redis.del(key);
      }
    }
    
    console.log(`‚úÖ ${blacklistedKeys.length} chaves de sess√£o verificadas`);
  } catch (error) {
    console.log('‚ùå Erro ao limpar sess√µes:', error);
    throw error;
  }
}

async function showSystemInfo() {
  console.log('\nüìä Informa√ß√µes do Sistema:');
  console.log(`   Ambiente: ${process.env.NODE_ENV || 'development'}`);
  console.log(`   Vers√£o Node.js: ${process.version}`);
  console.log(`   Porta da API: ${process.env.PORT || 3001}`);
  console.log(`   URL do Redis: ${process.env.REDIS_HOST || 'localhost'}:${process.env.REDIS_PORT || 6379}`);
  console.log(`   CORS Origin: ${process.env.CORS_ORIGIN || 'https://portal.sabercon.com.br'}`);
  console.log(`   JWT Secret: ‚úÖ Hardcoded (Produ√ß√£o)`);
  
  // Verifica configura√ß√µes importantes
  const warnings = [];
  
  // JWT_SECRET agora √© hardcoded - n√£o precisa de verifica√ß√£o
  
  if (process.env.NODE_ENV === 'production' && !process.env.REDIS_PASSWORD) {
    warnings.push('Redis sem senha em produ√ß√£o');
  }
  
  if (warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  Avisos de Configura√ß√£o:');
    warnings.forEach(warning => console.log(`   - ${warning}`));
  }
}

async function main() {
  console.log('üöÄ Iniciando setup do Portal Sabercon Backend...\n');
  
  try {
    // Setup do banco de dados
    await setupDatabase();
    
    // Setup do Redis
    await setupRedis();
    
    // Cria dados padr√£o
    await createDefaultData();
    
    // Limpa sess√µes expiradas
    await cleanupExpiredSessions();
    
    // Mostra informa√ß√µes do sistema
    await showSystemInfo();
    
    console.log('\n‚úÖ Setup conclu√≠do com sucesso!');
    console.log('\nüåê Para iniciar o servidor, execute:');
    console.log('   npm run dev (desenvolvimento)');
    console.log('   npm run start (produ√ß√£o)\n');
    
  } catch (error) {
    console.log('\n‚ùå Falha no setup:', error);
    process.exit(1);
  } finally {
    // Fecha conex√µes
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
    }
    
    const redis = getRedisClient();
    if (redis.status === 'ready') {
      await redis.quit();
    }
    
    process.exit(0);
  }
}

// Executa o setup se este arquivo for executado diretamente
if (require.main === module) {
  main().catch(error => {
    console.log('Erro fatal no setup:', error);
    process.exit(1);
  });
}

export default main; 