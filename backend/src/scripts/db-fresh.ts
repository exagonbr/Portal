import knex from 'knex';
import config from '../../knexfile';
import { spawn } from 'child_process';
import path from 'path';
import mysql from 'mysql2/promise';
import fs from 'fs/promises';

const environment = process.env.NODE_ENV || 'development';
const db = knex(config[environment]);

// Configura√ß√£o MySQL
const MYSQL_CONFIG = {
  host: process.env.MYSQL_HOST || 'localhost',
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  database: process.env.MYSQL_DATABASE || 'sabercon',
  port: parseInt(process.env.MYSQL_PORT || '3306'),
  multipleStatements: true
};

interface TableInfo {
  name: string;
  columns: string[];
  exists: boolean;
}

async function runCommand(command: string, args: string[] = []): Promise<void> {
  return new Promise((resolve, reject) => {
    console.log(`üîß Executando: ${command} ${args.join(' ')}`);
    
    const process = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
      cwd: path.join(__dirname, '../..')
    });

    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Comando falhou com c√≥digo ${code}`));
      }
    });

    process.on('error', (error) => {
      reject(error);
    });
  });
}

async function checkMySQLConnection(): Promise<boolean> {
  try {
    const connection = await mysql.createConnection(MYSQL_CONFIG);
    await connection.ping();
    await connection.end();
    console.log('‚úÖ Conex√£o MySQL verificada com sucesso');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è MySQL n√£o dispon√≠vel:', (error as Error).message);
    return false;
  }
}

async function getPostgreSQLTables(): Promise<string[]> {
  try {
    const tables = await db.raw(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    return tables.rows.map((row: any) => row.table_name);
  } catch (error) {
    console.log('‚ùå Erro ao buscar tabelas PostgreSQL:', error);
    return [];
  }
}

async function getMySQLTables(): Promise<string[]> {
  try {
    const connection = await mysql.createConnection(MYSQL_CONFIG);
    const [tables] = await connection.execute('SHOW TABLES') as any[];
    await connection.end();
    return tables.map((row: any) => Object.values(row)[0] as string);
  } catch (error) {
    console.log('‚ùå Erro ao buscar tabelas MySQL:', error);
    return [];
  }
}

async function createMissingMigrations(missingTables: string[]): Promise<void> {
  if (missingTables.length === 0) return;

  console.log(`üèóÔ∏è Criando migrations para ${missingTables.length} tabelas faltantes...`);

  for (const tableName of missingTables) {
    try {
      const timestamp = new Date().toISOString().replace(/[-:T]/g, '').slice(0, 14);
      const migrationName = `${timestamp}_create_${tableName}_table.js`;
      const migrationPath = path.join(__dirname, '../database/migrations', migrationName);

      const migrationContent = `
/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function(knex) {
  return knex.schema.createTable('${tableName}', function (table) {
    table.uuid('id').primary().defaultTo(knex.raw('gen_random_uuid()'));
    table.string('name').notNullable();
    table.text('description').nullable();
    table.boolean('is_active').defaultTo(true);
    table.timestamps(true, true);
    
    // √çndices b√°sicos
    table.index(['name']);
    table.index(['is_active']);
    table.index(['created_at']);
  });
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = function(knex) {
  return knex.schema.dropTableIfExists('${tableName}');
};
`;

      await fs.writeFile(migrationPath, migrationContent.trim());
      console.log(`   ‚úÖ Migration criada: ${migrationName}`);
    } catch (error) {
      console.log(`   ‚ùå Erro ao criar migration para ${tableName}:`, error);
    }
  }
}

async function createMissingSeeds(missingTables: string[]): Promise<void> {
  if (missingTables.length === 0) return;

  console.log(`üå± Criando seeds para ${missingTables.length} tabelas faltantes...`);

  for (const tableName of missingTables) {
    try {
      const timestamp = new Date().toISOString().replace(/[-:T]/g, '').slice(0, 14);
      const seedName = `${timestamp}_${tableName}_seed.js`;
      const seedPath = path.join(__dirname, '../database/seeds', seedName);

      const seedContent = `
/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> } 
 */
exports.seed = async function(knex) {
  // Limpar dados existentes
  await knex('${tableName}').del();
  
  // Inserir dados b√°sicos
  await knex('${tableName}').insert([
    {
      name: '${tableName.charAt(0).toUpperCase() + tableName.slice(1)} Padr√£o 1',
      description: 'Registro padr√£o criado automaticamente',
      is_active: true
    },
    {
      name: '${tableName.charAt(0).toUpperCase() + tableName.slice(1)} Padr√£o 2',
      description: 'Segundo registro padr√£o criado automaticamente',
      is_active: true
    }
  ]);
  
  console.log('‚úÖ Seed ${tableName} executado com sucesso');
};
`;

      await fs.writeFile(seedPath, seedContent.trim());
      console.log(`   ‚úÖ Seed criado: ${seedName}`);
    } catch (error) {
      console.log(`   ‚ùå Erro ao criar seed para ${tableName}:`, error);
    }
  }
}

async function compareTables(): Promise<string[]> {
  console.log('üîç Comparando estruturas de tabelas...');
  
  const [pgTables, mysqlTables] = await Promise.all([
    getPostgreSQLTables(),
    getMySQLTables()
  ]);

  console.log(`   üìä PostgreSQL: ${pgTables.length} tabelas`);
  console.log(`   üìä MySQL: ${mysqlTables.length} tabelas`);

  // Encontrar tabelas que existem no MySQL mas n√£o no PostgreSQL
  const missingTables = mysqlTables.filter(table => 
    !pgTables.includes(table) && 
    !table.startsWith('knex_') && 
    !table.startsWith('migrations')
  );

  if (missingTables.length > 0) {
    console.log(`   ‚ö†Ô∏è Tabelas faltantes no PostgreSQL: ${missingTables.join(', ')}`);
    return missingTables;
  } else {
    console.log('   ‚úÖ Todas as tabelas MySQL est√£o presentes no PostgreSQL');
    return [];
  }
}

async function fresh() {
  try {
    console.log('üîÑ Iniciando reset completo do banco de dados...');
    console.log('==========================================');
    
    // 1. Drop all tables
    console.log('üóëÔ∏è  Dropando todas as tabelas...');
    await db.raw('DROP SCHEMA public CASCADE; CREATE SCHEMA public;');
    console.log('‚úÖ Todas as tabelas foram removidas.');

    // 2. Run migrations
    console.log('\nüèóÔ∏è  Executando migra√ß√µes...');
    await runCommand('npm', ['run', 'migrate:latest']);
    console.log('‚úÖ Migra√ß√µes executadas com sucesso.');

    // 3. Run seeds
    console.log('\nüå± Executando seeds de dados iniciais...');
    await runCommand('npm', ['run', 'seed:run']);
    console.log('‚úÖ Seeds executados com sucesso.');

    // 4. Verificar conex√£o MySQL e comparar tabelas
    console.log('\nüîó Verificando conex√£o MySQL...');
    const mysqlAvailable = await checkMySQLConnection();
    
    if (mysqlAvailable) {
      // 5. Comparar estruturas e criar migrations/seeds faltantes
      const missingTables = await compareTables();
      
      if (missingTables.length > 0) {
        await createMissingMigrations(missingTables);
        await createMissingSeeds(missingTables);
        
        // Executar novas migrations e seeds
        console.log('\nüîÑ Executando novas migrations...');
        await runCommand('npm', ['run', 'migrate:latest']);
        
        console.log('\nüå± Executando novos seeds...');
        try {
          await runCommand('npm', ['run', 'seed:run']);
        } catch (error) {
          console.log('‚ö†Ô∏è Alguns seeds falharam (normal devido √† ordem), continuando...');
        }
      }

      // 6. Executar migra√ß√£o MySQL ‚Üí PostgreSQL
      console.log('\nüìä Iniciando importa√ß√£o de dados do MySQL...');
      try {
        await runCommand('npm', ['run', 'migrate:mysql:complete']);
        console.log('‚úÖ Dados MySQL importados com sucesso.');
      } catch (error) {
        console.log('‚ö†Ô∏è Erro na importa√ß√£o MySQL (continuando):', (error as Error).message);
      }

      // 7. Verifica√ß√£o final
      console.log('\nüîç Executando verifica√ß√£o final...');
      try {
        await runCommand('npm', ['run', 'migrate:mysql:verify']);
      } catch (error) {
        console.log('‚ö†Ô∏è Verifica√ß√£o final falhou (n√£o cr√≠tico):', (error as Error).message);
      }
    } else {
      console.log('‚ö†Ô∏è MySQL n√£o dispon√≠vel - pulando importa√ß√£o de dados');
    }
    
    // 8. Relat√≥rio final
    console.log('\nüéâ BANCO DE DADOS RESETADO COM SUCESSO!');
    console.log('==========================================');
    console.log('‚úÖ OPERA√á√ïES REALIZADAS:');
    console.log('   ‚Ä¢ Schema PostgreSQL recriado');
    console.log('   ‚Ä¢ Todas as migrations executadas');
    console.log('   ‚Ä¢ Todos os seeds executados');
    
    if (mysqlAvailable) {
      console.log('   ‚Ä¢ Dados MySQL importados');
      console.log('   ‚Ä¢ Tabelas faltantes criadas automaticamente');
    }
    
    console.log('\nüë• USU√ÅRIOS DE TESTE DISPON√çVEIS:');
    console.log('üìß Admin: admin@sabercon.edu.br');
    console.log('üìß Professor: teacher@sabercon.edu.br');
    console.log('üìß Estudante: student@sabercon.edu.br');
    console.log('üìß Respons√°vel: guardian@sabercon.edu.br');
    console.log('üìß Coordenador: coordinator@sabercon.edu.br');
    console.log('üìß Gerente: institution.manager@sabercon.edu.br');
    console.log('üîë Senha para todos: password123');
    
    console.log('\nüîó RELACIONAMENTOS E PERMISS√ïES:');
    console.log('‚úÖ Todos os usu√°rios associados √†s suas roles');
    console.log('‚úÖ Tabela user_roles populada');
    console.log('‚úÖ Permiss√µes de roles configuradas');
    console.log('‚úÖ Hierarquia de permiss√µes estabelecida');
    
    if (mysqlAvailable) {
      console.log('\nüìä DADOS MYSQL IMPORTADOS:');
      console.log('‚úÖ Usu√°rios migrados com role TEACHER');
      console.log('‚úÖ Institui√ß√µes e escolas importadas');
      console.log('‚úÖ Arquivos e cole√ß√µes migrados');
      console.log('‚úÖ Dados organizados em estrutura padr√£o');
    }
    
    console.log('==========================================\n');
    
  } catch (error) {
    console.error('‚ùå Erro ao resetar banco de dados:', error);
    process.exit(1);
  } finally {
    await db.destroy();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  fresh();
}

export default fresh;