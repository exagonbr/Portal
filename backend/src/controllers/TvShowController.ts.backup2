import { Request, Response } from 'express';
import { TvShowRepository } from '../repositories/TvShowRepository';
import { BaseController } from './BaseController';
import { TvShow } from '../entities/TvShow';



export class TvShowController extends BaseController<TvShow> {
    private TvShowRepository: TvShowRepository;

  private tvShowRepository: TvShowRepository;
    constructor() {
        const repository = new TvShowRepository();
        super(repository);
        this.TvShowRepository = repository;
    }
    
    async getAll(req: Request, res: Response) {
        try {
            // Adicionar timeout para evitar travamentos
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout na busca de TV Shows')), 25000); // 25 segundos
            });

            const tvShowsPromise = tvShowRepository.findWithFilters({
                page: req.query.page ? parseInt(req.query.page as string, 10) : 1,
                limit: req.query.limit ? parseInt(req.query.limit as string, 10) : 10,
                sortBy: 'name',
                sortOrder: req.query.sortOrder as 'asc' | 'desc',
                search: req.query.search as string,
            });

            const tvShowsResult = await Promise.race([tvShowsPromise, timeoutPromise]) as any;
    
            if (!tvShowsResult) {
                return res.status(404).json({ success: false, message: 'TV Shows not found' });
            }
            
            // Transformar o formato para o que o frontend espera
            const responseData = {
                tvShows: tvShowsResult.items || [],
                page: tvShowsResult.pagination?.page || 1,
                limit: tvShowsResult.pagination?.limit || 10,
                total: tvShowsResult.pagination?.total || 0,
                totalPages: tvShowsResult.pagination?.totalPages || 1
            };
            
            return res.status(200).json({ success: true, data: responseData });
        } catch (error) {
            console.error(`Error in getAllTvShows: ${error}`);
            
            // Se for timeout, retornar erro espec√≠fico
            if (error instanceof Error && error.message.includes('Timeout')) {
                return res.status(504).json({ 
                    success: false, 
                    message: 'Timeout na busca de TV Shows - opera√ß√£o demorou muito',
                    code: 'TIMEOUT_ERROR'
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'TV Shows Internal Server Error: ' + error,
                code: 'INTERNAL_ERROR'
            });
        }
    }

    async getById(req: Request, res: Response) {
        try {
            // Adicionar timeout para evitar travamentos
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout na busca de TV Show')), 25000); // 25 segundos
            });

            const tvShowPromise = tvShowRepository.findByIdForApi(req.params.id);
            const tvShow = await Promise.race([tvShowPromise, timeoutPromise]);
            
            if (!tvShow) {
                return res.status(404).json({ success: false, message: 'TV Show not found' });
            }
            
            return res.status(200).json({ success: true, data: tvShow });
        } catch (error) {
            console.error(`Error in getByIdTvShows: ${error}`);
            
            // Se for timeout, retornar erro espec√≠fico
            if (error instanceof Error && error.message.includes('Timeout')) {
                return res.status(504).json({ 
                    success: false, 
                    message: 'Timeout na busca de TV Show - opera√ß√£o demorou muito',
                    code: 'TIMEOUT_ERROR'
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'Internal Server Error: ' + error,
                code: 'INTERNAL_ERROR'
            });
        }
    }

    async getModules(req: Request, res: Response) {
        try {
            console.log(`üîç Buscando m√≥dulos para TV Show ID: ${req.params.id}`);
            
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout na busca de m√≥dulos')), 25000);
            });

            const modulesPromise = tvShowRepository.findModulesByTvShowId(req.params.id);
            const modules = await Promise.race([modulesPromise, timeoutPromise]);
            
            console.log(`‚úÖ M√≥dulos encontrados: ${Object.keys(modules || {}).length}`);
            
            return res.status(200).json({ 
                success: true, 
                data: modules || {},
                message: 'M√≥dulos carregados com sucesso'
            });
        } catch (error) {
            console.error(`Error in getModules: ${error}`);
            
            if (error instanceof Error && error.message.includes('Timeout')) {
                return res.status(504).json({ 
                    success: false, 
                    message: 'Timeout na busca de m√≥dulos - opera√ß√£o demorou muito',
                    code: 'TIMEOUT_ERROR'
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'Erro ao buscar m√≥dulos: ' + error,
                code: 'INTERNAL_ERROR'
            });
        }
    }

    async getVideos(req: Request, res: Response) {
        try {
            console.log(`üé¨ Buscando v√≠deos para TV Show ID: ${req.params.id}`);
            
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout na busca de v√≠deos')), 25000);
            });

            const videosPromise = tvShowRepository.findVideosByTvShowId(req.params.id);
            const videos = await Promise.race([videosPromise, timeoutPromise]);
            
            console.log(`‚úÖ V√≠deos encontrados: ${Array.isArray(videos) ? videos.length : 0}`);
            
            return res.status(200).json({ 
                success: true, 
                data: videos || [],
                message: 'V√≠deos carregados com sucesso'
            });
        } catch (error) {
            console.error(`Error in getVideos: ${error}`);
            
            if (error instanceof Error && error.message.includes('Timeout')) {
                return res.status(504).json({ 
                    success: false, 
                    message: 'Timeout na busca de v√≠deos - opera√ß√£o demorou muito',
                    code: 'TIMEOUT_ERROR'
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'Erro ao buscar v√≠deos: ' + error,
                code: 'INTERNAL_ERROR'
            });
        }
    }

    async getStats(req: Request, res: Response) {
        try {
            console.log(`üìä Buscando estat√≠sticas para TV Show ID: ${req.params.id}`);
            
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Timeout na busca de estat√≠sticas')), 25000);
            });

            const statsPromise = tvShowRepository.getStatsByTvShowId(req.params.id);
            const stats = await Promise.race([statsPromise, timeoutPromise]);
            
            console.log(`‚úÖ Estat√≠sticas calculadas:`, stats);
            
            return res.status(200).json({ 
                success: true, 
                data: stats,
                message: 'Estat√≠sticas carregadas com sucesso'
            });
        } catch (error) {
            console.error(`Error in getStats: ${error}`);
            
            if (error instanceof Error && error.message.includes('Timeout')) {
                return res.status(504).json({ 
                    success: false, 
                    message: 'Timeout na busca de estat√≠sticas - opera√ß√£o demorou muito',
                    code: 'TIMEOUT_ERROR'
                });
            }
            
            return res.status(500).json({ 
                success: false, 
                message: 'Erro ao buscar estat√≠sticas: ' + error,
                code: 'INTERNAL_ERROR'
            });
        }
    }

    async toggleStatus(req: Request, res: Response) {
        try {
            const { id } = req.params;
            const tvShow = await tvShowRepository.toggleStatus(id);
            if (!tvShow) {
                return res.status(404).json({ success: false, message: 'TV Show not found' });
            }
            return res.status(200).json({ success: true, data: tvShow });
        } catch (error) {
            console.error(`Error in toggleStatus: ${error}`);
            return res.status(500).json({ success: false, message: 'Internal Server Error' });
        }
    }
}

export default new TvShowController();