import { Request, Response } from 'express';
import { BaseController } from './BaseController';
import { User } from '../entities/User';
import { UserRepository } from '../repositories/UserRepository';
import authService from '../services/AuthService';

export class UserController extends BaseController<User> {
  private userRepository: UserRepository;

  constructor() {
    const repository = new UserRepository();
    super(repository);
    this.userRepository = repository;
  }

 // Aqui você pode adicionar métodos específicos para o UserController, se necessário.
 // Por exemplo, um método para buscar usuários por role ou instituição.

 public async getAll(req: Request, res: Response): Promise<Response> {
  try {
    // Adicionar timeout para evitar travamentos
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout na busca de Usuários')), 25000); // 25 segundos
    });

    const { 
      page = '1', 
      limit = '10', 
      search, 
      role_id, 
      institution_id, 
      is_active, 
      sortBy, 
      sortOrder 
    } = req.query;

    const options = {
      page: parseInt(page as string, 10),
      limit: parseInt(limit as string, 10),
      search: search as string,
    };

    const filters: any = {};
    if (role_id) filters.role_id = role_id;
    if (institution_id) filters.institution_id = institution_id;
    if (is_active !== undefined) filters.is_active = is_active === 'true';
    if (sortBy) filters.sortBy = sortBy as string;
    if (sortOrder) filters.sortOrder = sortOrder as 'asc' | 'desc';

    const usersPromise = this.userRepository.findAllPaginated({
      ...options,
      ...filters
    });

    // Usar Promise.race para aplicar timeout
    const result = await Promise.race([usersPromise, timeoutPromise]) as any;

    if (!result) {
      return res.status(404).json({ success: false, message: 'Usuários não encontrados' });
    }

    return res.status(200).json({
      success: true,
      data: {
        items: result.data || [],
        pagination: {
          page: result.page || 1,
          limit: result.limit || 10,
          total: result.total || 0,
          totalPages: Math.ceil(result.total / result.limit) || 1
        }
      }
    });
  } catch (error) {
    console.error('Erro ao buscar usuários:', error);

    // Se for timeout, retornar erro específico
    if (error instanceof Error && error.message.includes('Timeout')) {
      return res.status(504).json({ 
        success: false, 
        message: 'Timeout na busca de Usuários - operação demorou muito',
        code: 'TIMEOUT_ERROR'
      });
    }
    
    return res.status(500).json({ 
      success: false, 
      message: 'Erro interno do servidor: ' + error,
      code: 'INTERNAL_ERROR'
    });
  }
 }

 public async login(req: Request, res: Response): Promise<Response> {
  const { email, password } = req.body;

  if (!email || !password) {
   return res.status(400).json({ success: false, message: 'Email e senha são obrigatórios.' });
  }

  try {
   const result = await authService.login(email, password);

   if (!result.success || !result.data) {
    return res.status(401).json({ success: false, message: result.message || 'Credenciais inválidas.' });
   }

   // Envia o refresh token em um cookie seguro
   authService.sendRefreshToken(res, result.data.refreshToken);

   // Retorna o access token e os dados do usuário no corpo da resposta
   return res.json({
    success: true,
    data: {
     accessToken: result.data.accessToken,
     user: result.data.user,
    },
   });
  } catch (error: any) {
   console.error('Erro no login:', error);
   return res.status(500).json({ 
    success: false, 
    message: 'Erro interno do servidor',
    error: error.message 
   });
  }
 }

 public async toggleStatus(req: Request, res: Response): Promise<Response> {
  const { id } = req.params;
  return res.json({ message: `toggle status for user ${id}`, data: req.body });
 }

 public async changePassword(req: Request, res: Response): Promise<Response> {
  const { id } = req.params;
  return res.json({ message: `change password for user ${id}`, data: req.body });
 }

 public async getProfile(req: Request, res: Response): Promise<Response> {
  const { id } = req.params;
  return res.json({ message: `get profile for user ${id}` });
 }
}

export default new UserController();
