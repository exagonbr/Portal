import { Request, Response } from 'express';
import { BaseController } from './BaseController';
import { Video } from '../entities/Video';
import { VideoRepository } from '../repositories/VideoRepository';



export class VideoController extends BaseController<Video> {
    private VideoRepository: VideoRepository;

  private videoRepository: VideoRepository;
    constructor() {
        const repository = new VideoRepository();
        super(repository);
        this.VideoRepository = repository;
    }

    async getAll(req: Request, res: Response): Promise<Response> {
        return res.json({ message: `getAll videos with query ${JSON.stringify(req.query)}` });
    }

    async getById(req: Request, res: Response): Promise<Response> {
        return res.json({ message: `get video by id ${req.params.id}` });
    }

    async create(req: Request, res: Response): Promise<Response> {
        return res.status(201).json({ message: 'create video', data: req.body });
    }

    async update(req: Request, res: Response): Promise<Response> {
        return res.json({ message: `update video ${req.params.id}`, data: req.body });
    }

    async delete(req: Request, res: Response): Promise<Response> {
        return res.status(204).send();
    }
}

export default new VideoController();