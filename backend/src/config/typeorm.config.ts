import { DataSource } from 'typeorm';
import * as dotenv from 'dotenv';
import {
  Announcement,
<<<<<<< HEAD
  ActivitySession,
=======
  Answer,
>>>>>>> 2b9a658619be4be8442857987504eeff79e3f6b9
  Author,
  Book,
  Certificate,
  ChatMessage,
  Class,
  Collection,
  CookieSigned,
  Course,
  EducationCycle,
  EducationPeriod,
  EducationalStage,
  File,
  ForgotPassword,
  ForumReply,
  ForumThread,
  Genre,
  Institution,
  Language,
  MediaEntry,
  MediaFile,
  Module,
  Notification,
  NotificationLog,
  NotificationTemplate,
  Profile,
  Public,
  Publisher,
  Question,
  Quiz,
  Role,
  School,
  SchoolManager,
  Settings,
  Subject,
  Tag,
  TargetAudience,
  TeacherSubject,
  Theme,
  TvShow,
  Unit,
  UnitClass,
  User,
  UserClass,
  UserRoleMapping,
  Video,
  VideoCollection,
  VideoFile,
  VideoModule
} from '../entities';

dotenv.config();

export const AppDataSource = new DataSource({
  type: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  username: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'root',
  database: process.env.DB_NAME || 'portal_sabercon',
  synchronize: true, // Não sincronizar automaticamente em produção
  logging: process.env.NODE_ENV === 'development',
  ssl: process.env.DB_SSL === 'true' ? {
    rejectUnauthorized: false
  } : false,
  extra: {
    ssl: process.env.DB_SSL === 'true' ? {
      rejectUnauthorized: false
    } : false
  },
  entities: [
    Announcement,
<<<<<<< HEAD
    ActivitySession,
=======
    Answer,
>>>>>>> 2b9a658619be4be8442857987504eeff79e3f6b9
    Author,
    Book,
    Certificate,
    ChatMessage,
    Class,
    Collection,
    CookieSigned,
    Course,
    EducationCycle,
    EducationPeriod,
    EducationalStage,
    File,
    ForgotPassword,
    ForumReply,
    ForumThread,
    Genre,
    Institution,
    Language,
    MediaEntry,
    MediaFile,
    Module,
    Notification,
    NotificationLog,
    Profile,
    Public,
    Publisher,
    Question,
    Quiz,
    Role,
    School,
    SchoolManager,
    Settings,
    Subject,
    Tag,
    TargetAudience,
    TeacherSubject,
    Theme,
    TvShow,
    Unit,
    UnitClass,
    User,
    UserClass,
    UserRoleMapping,
    Video,
    VideoCollection,
    VideoFile,
    VideoModule
  ],
  migrations: ['src/database/migrations/*.ts'],
  subscribers: [],
});